{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"ble_proxy/gl-s10/","title":"Introduction","text":"<p>GL-S10 is an ESP32-powered BLE to MQTT IoT gateway. It can be used to facilitate communication between your beacons and servers, such as MQTT broker and AWS IoT. GL-S10 also comes with an optional beacon for testing and a tool app for fast and easy deployment.</p> <p>GL-S10 doesn't have a web Admin Panel. It is a BLE-WiFi gateway aimming to provide a simple method conversing Bluetooth Low Energy to WiFi. It supports GAP and GATT, can act as GATT server or GATT client. WiFi is used in STA mode, connect the superior router to access to the network. Also it can connect to network through Ethernet. It has a built-in standard MQTT client which could connect to any standard MQTT server.  Using MQTT, it can forward BLE messages to the cloud and on the other hand forward messages from cloud to the connected BLE device through BLE notify.</p> <p>Please access to learn more.</p> <p>User Manual</p> <p>Firmware Compilation Guide</p> <p>There is a video setup guide of GL-S10.</p>"},{"location":"ble_proxy/gl-s10/examples/","title":"Examples","text":"<p>Coming soon</p>"},{"location":"ble_proxy/gl-s10/firmware_compilation_guide/","title":"GL-S10 Firmware Compilation Guide","text":"<p>This doc is intended to help users set the software building environment and build your own applications for GL-S10.  As an example, we build a simple demo. It  aims to recieve iBeacons from around and then send it to specified MQTT broker through WiFi. Note that WiFi and MQTT setting is written in the source code.</p>"},{"location":"ble_proxy/gl-s10/firmware_compilation_guide/#set-develop-environment","title":"Set Develop Environment","text":"<p>GL-S10 application is base on Espressif esp-idf(v3.3). You can get the detailed steps of building the compile environment by following the link. https://docs.espressif.com/projects/esp-idf/en/v3.3/get-started/index.html#introduction (Attention: Please check the version of IDF before you download it.) After configuring the develop environment, decompress and get into the source code folder <code>ble_ibeacon/</code>. Most code is in the file <code>ibeacon_demo.c</code>.</p>"},{"location":"ble_proxy/gl-s10/firmware_compilation_guide/#modify-source-code","title":"Modify source code","text":"<p>1. Modify WiFi setting</p> <p>Find contents as below in the <code>ibeacon_demo.c</code> and modify the WiFi setting to what you want.</p> <pre><code>wifi_config_t wifi_config = {\n    .sta = {\n        .ssid = \"WIFI SSID\", //\n        .password = \"WIFI password\",\n    },\n};\n</code></pre> <p>2. Modify MQTT setting</p> <p>Similar with WiFi setting. Find and modify the struct <code>esp_mqtt_client_config_t</code> in the <code>ibeacon_demo.c</code>.</p> <pre><code>esp_mqtt_client_config_t mqtt_cfg = {\n    .uri = \"mqtt://192.168.100.174:61613\",//IP:port\n    .usernaem = \"MQTT username\",\n    .password = \"MQTT password\",\n    .event_handle = mqtt_event_handler,\n};\n</code></pre> <p>(If you want to connect to MQTT broker except tcp, change the url prefix.)</p> <pre><code>tcp ---&gt; mqtt://\ntcp-ssl ---&gt; mqtts://\nweb socket ---&gt; ws://\nweb socket secure ---&gt; wss://\n</code></pre>"},{"location":"ble_proxy/gl-s10/firmware_compilation_guide/#compile-and-flash","title":"Compile and Flash","text":"<p>1. Configuration</p> <p>Before compile the application, get into your project folder (here is <code>ble_ibeacon/</code>), using command <code>make menuconfig</code> to configure some basic setting like serial port. In the configuration inteface, you just need to change three point as follow. Firstly, click <code>Serial flasher config</code>.</p> <p></p> <p>Then modify the three point marked by red line.</p> <p></p> <p>Set <code>Default serial port</code> to the port name show in your PC, typically is <code>/dev/ttyUSB0</code>. Set <code>Serial flasher config ---&gt;Flash SPI speed</code> to <code>80MHz</code>. Set <code>Serial flasher config ---&gt;Flash size</code> to <code>4MB</code>.</p> <p>2. Build</p> <p>In your project folder, using command <code>make all</code>. It will compile and build the firmware. When finished sucessfully, it will show information like this.</p> <p></p> <p>3. Flash</p> <p>GL-S10 using UART to flash the firmware, and also using this UART to output the system log. Connect the UART in S10 to the PC by a USB-UART converter. The PC will find a new usb device like <code>/dev/ttyUSB0</code>. It is the name you should write in the <code>Default serial port</code>.   </p> <p></p> <p>After connect S10 UART to the PC, using command <code>make flash</code> or <code>make flash monitor</code> to flash the firmware. When shows like that, it means the PC is waiting S10 to get into \"download mode\".</p> <p></p> <p>How to get into \"download mode\", do in this way. Unplug the S10 power, press the flash button(do not release) and then plug in the power. When it shows like that,</p> <p></p> <p>means flash starts sucessfully, then you can release the flash button and wait for the flash finished. When flash has been finished, restart the GL-S10.</p>"},{"location":"ble_proxy/gl-s10/firmware_compilation_guide/#result","title":"Result","text":"<p>If you have connect the S10 UART to the PC, using command <code>make monitor</code>, it will print all the system log like that. (here shows the iBeacon data it recieved)</p> <p></p> <p>In the MQTT broker, You can get the messages published by S10 like that.</p> <p></p>"},{"location":"ble_proxy/gl-s10/hardware/","title":"Hardware info","text":""},{"location":"ble_proxy/gl-s10/hardware/#specification","title":"Specification","text":"<p>GL-s10 specification</p>"},{"location":"ble_proxy/gl-s10/hardware/#gpio-list","title":"GPIO list","text":"ESP32-WROOM-32U GPIO Labeling SIGNAL FUNCTION GPIO0 GPIO0 download button control, default to high, when starting, low to enter download mode GPIO1 UART_TX0 used for debugging serial port output GPIO2 TP3 reserve JTAG testing points GPIO3 UART_RX0 used for debugging serial port input GPIO4 GPIO4 NC GPIO5 PHY_RESET MAC phy reset control GPIO6 PSRAM_CLK psram clock signal GPIO7 PSRAM SDO/SD0 psram data signal SDO/SD0 GPIO8 PSRAM SDI/SD1 psram data signal SDI/SD1 GPIO9 PSRAM SHD/SD2 psram data signal SHD/SD2 GPIO10 PSRAM SWP/SD3 psram data signal SWP/SD3 GPIO11 GPIO11 NC GPIO12 BT LED ble led control, pull down to light up GPIO13 I2C_CLK I2C clock signal GPIO14 POWER_LED power led control GPIO15 I2C_DATA I2C data signal GPIO16 PSRAM_CE psram control signal GPIO17 PHY_CLK phy chip clock signal GPIO18 MDIO phy chip control signal MDIO GPIO19 RMII_TXD0 RMII interface TX data TXD0 GPIO21 RMII_TXEN RMII interface TX enable TXEN GPIO22 RMII_TXD1 RMII interface TX data TXD1 GPIO23 MDC phy chip control signal MDC GPIO25 RMII_RXD0 RMII interface RX data RXD0 GPIO26 RMII_RXD1 RMII interface RX data RXD1 GPIO27 RMII_CS_DV RMII interface collision detection signal CS_DV GPIO32 NETWORK LED network led control GPIO33 BUTTON button input GPIO34 GPIO34 NC GPIO35 GPIO35 NC GPIO36 GPIO36 NC GPIO39 GPIO39 NC"},{"location":"ble_proxy/gl-s10/hardware/#pcb-pinout","title":"PCB Pinout","text":""},{"location":"ble_proxy/gl-s10/software/","title":"Software","text":"<p>Coming soon</p>"},{"location":"ble_proxy/gl-s10/tools/","title":"Tools","text":"<p>Coming soon</p>"},{"location":"ble_proxy/gl-s10/user_manual/","title":"GL-S10 User Manual","text":"Version Date Commit V2.0.3 2021-12-17 -"},{"location":"ble_proxy/gl-s10/user_manual/#general-product-introduction","title":"General Product Introduction","text":""},{"location":"ble_proxy/gl-s10/user_manual/#product-introduction","title":"Product introduction","text":"<p>The GL-S10 is an IoT gateway device that supports BLE and Wi-Fi, providing a cost-effective solution for transmitting BLE broadcast data to the cloud. BLE supports GAP and GATT certification and can be used as either Master or Slave to connect and communicate with other BLE devices. GL-S10 can use Wi-Fi as a Station to connect to a parent route or can connect to the Internet through a WAN port. It has a built-in standard MQTT Client that can connect to any standard MQTT Servers to forward incoming BLE messages to the cloud server. </p> <p>The GL-S10 is ideally deployed in warehouses, shopping malls, airports, exhibition halls, tourist attractions and other scenarios for personnel management, asset management, environmental monitoring, indoor navigation, etc. </p>"},{"location":"ble_proxy/gl-s10/user_manual/#product-feature","title":"Product feature","text":"<ul> <li> <p>Runs on Dual-core Xtensa\u00ae 32-bit LX6 microprocessor, supports BLE, Wi-Fi, and Ethernet </p> </li> <li> <p>BLE supports BLE 4.2 Certification </p> </li> <li> <p>BLE communication distance is measured up to 80m (in an open and non-interference environment) </p> </li> <li> <p>Supports multiple encryption methods </p> </li> <li> <p>Supports upgrading firmware via OTA and local serial port </p> </li> <li> <p>Supports MQTT and integrating to multiple server platforms </p> </li> <li> <p>Includes application for configuration with customized connection to Wi-Fi and MQTT servers </p> </li> <li> <p>Supports 802.3at/af standard POE input power </p> </li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#technical-specification","title":"Technical specification","text":"Project Description CPU ESP32-DOWD  Dual-core Xtensa \u00ae 32-bit LX6 microprocessor Nor-Flash 4MB RAM SRAM 520KB + PSRAM 8MB BLE Supports BLE 4.2 Certification  Coverage of 80m (in an open and non-interference environment)  Receiving sensitivity - 97dBm WiFi 802.11b/g/n  Coverage of 80m (in an open and non-interference environment).  Transmitting power 11n: 13dBm; 11b: 18.5dBm  Speed 150Mbps WAN 1 Megabit Ethernet port Button 1 Reset button  Configuration mode, Resetting and OTA upgrading can be accessed by pressing the button LED 3 LED lights:  Power, BLE and Network Indicator Lights Power Supply Supports 1x Micro USB, 5V/1A input  Supports 802.3at/af standard POE input power  Note: Charging with both methods simultaneously may cause damage to the device. Power Consumption Normal operations: &lt; 0.5W  Operating at full capacity: &lt; 1.5W Shell Size 57 * 57 * 25mm(L * M * H) Shell Material ABS Antenna Type External antenna Working Temperature 0~40\u00b0C Storage Temperature -20~70\u00b0C Working humidity 5% ~ 90%, no condensation Storage humidity 5% ~ 95%, no condensation"},{"location":"ble_proxy/gl-s10/user_manual/#package-list","title":"Package list","text":"Project Quantity GL-S10 Gateway 1 BLE Beacon (optional accessory) 1 External Antenna 1 USB Power Cord 1 User Manual 1"},{"location":"ble_proxy/gl-s10/user_manual/#device-and-app-installation","title":"Device and APP Installation","text":""},{"location":"ble_proxy/gl-s10/user_manual/#device-installation","title":"Device installation","text":"<p>Take out the product from its package and attach the external antenna as shown below.   Figure 1</p> <p>Note: </p> <ul> <li> <p>Avoid plugging in the PoE power supply and 5V power supply simultaneously, it may cause damage to the device.  </p> </li> <li> <p>Do not connect to any power supply (including PoE &amp; 5V) before installing the antenna. </p> </li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#button-function-list","title":"Button function list","text":"Pairing mode Reset to factory setting OTA upgrade When it is not connected to any power supply, press, and hold the \"Reset\" button while plugging in the power cord. While pressing the \"Reset\" button, turn on the power, press and hold the \"Reset\" button for 5 seconds and release. While pressing the \"Reset\" button, turn on the power, press and hold the \"Reset\" button for 10 seconds and release."},{"location":"ble_proxy/gl-s10/user_manual/#led-description","title":"LED description","text":"LED Light Status Reset to factory setting Enter OTA mode OTA upgrade process Power  (Green light) Light on: Device is on  Light off: Device is off Blinks slowly Blinks fast Blinks alternatively BLE  (Green light) Light blinks: Paring Mode(Disconnected)  Light on: Paring Mode(Connected)  Light off: Scanning Mode Blinks slowly Blinks fast Blinks alternatively Network  (White light) Light blinks: Wi-Fi connected  Light on: Ethernet connected  Light off: Not connected Blinks slowly Blinks fast Blinks alternatively"},{"location":"ble_proxy/gl-s10/user_manual/#ble-beacon","title":"BLE beacon","text":"<p>BLE Beacon is an optional accessory. User can purchase gateway kit with beacon for a quick Demo. The beacon can also be used for indoor positioning, asset management and other scenarios. The rotating base makes the device easy to disassemble; and the base has 3M adhesive which makes it easy to fix in place. </p> <p>After turning on the BLE switch at the bottom of the beacon, the beacon will broadcast BLE signals at an interval of 300ms. Select the filter function of GL-S10 and identify the devices by the BLE MAC address printed at the bottom of the beacon. </p> <p> Figure 2</p>"},{"location":"ble_proxy/gl-s10/user_manual/#app-installation","title":"APP installation","text":"<p>Download and install GL-S10 Tool App on your phone, turn on the Bluetooth function of your phone (For Android phone users, please turn on Bluetooth and GPS), and follow the instructions in this user manual to configure your GL-S10.</p> Figure 3"},{"location":"ble_proxy/gl-s10/user_manual/#app-configuration","title":"App Configuration","text":""},{"location":"ble_proxy/gl-s10/user_manual/#set-configuration-mode","title":"Set configuration mode","text":"<p>Before using the app for configuration, set GL-S10 into its paring mode by pressing the Reset button of GL-S10 when the power is off, then turn on the power. Release the button when you see the BLE indicator in the middle flashes, and your GL-S10 will enter its pairing mode. </p>"},{"location":"ble_proxy/gl-s10/user_manual/#app-language","title":"App language","text":"<p>Start the app and select the app language, you can choose between English and Simplified Chinese.</p> Figure 4 Figure 5"},{"location":"ble_proxy/gl-s10/user_manual/#connecting-your-gl-s10","title":"Connecting your GL-S10","text":"<p>Click the \"scan\" button in the upper right corner. The scanning result automatically filters out non-GL-S10 devices. If more than one GL-S10 are scanned, select the devices you want to connect according to the BLE MAC address on the label at the bottom of your GL-S10 shell (as shown below). </p> <p>Note: WAN MAC address is BLE MAC address minus 1, WiFi MAC address is BLE MAC address minus 2</p> Figure 6 Figure 7"},{"location":"ble_proxy/gl-s10/user_manual/#home-page","title":"Home page","text":"<p>Select a GL-S10 device and enter the \"Manage Device\" interface as shown below   Figure 8</p>"},{"location":"ble_proxy/gl-s10/user_manual/#device-info","title":"Device Info","text":"<p>You can click to view the details of the device as shown below</p> Figure 9 Figure 10"},{"location":"ble_proxy/gl-s10/user_manual/#protocal-configuration","title":"Protocal configuration","text":"<p>To setup uplink connection using a Protocal on the WAN port, click \"Manage Device\" &gt; \"Protocal\" &gt; \"Protocal\". You can configure \"DHCP\" and \"Static IP\" mode, then click \"Done\" to save the settings as shown below.</p> Figure 11 Figure 12"},{"location":"ble_proxy/gl-s10/user_manual/#wi-fi-configuration","title":"Wi-Fi configuration","text":"<p>To connect to a primary gateway, click \"Manage Device\" &gt; \"WiFi\" &gt; \"Connect WiFi\" &gt; \"Scan WiFi\", and select your WiFi SSID. You can also select \"None\", \"WPA2\" or \"WPA2 Enterprise\" mode. Click \"Done\" on the upper right corner to confirm the setting as shown below. If you want to upgrade your WPA2 ENTERPRISE certificate, click \u201cUpgrade certificate\u201d. </p> Figure 13 Figure 14 <p> Figure 15</p>"},{"location":"ble_proxy/gl-s10/user_manual/#mqtt-configuration","title":"MQTT Configuration","text":"<p>To configure MQTT, click \"Manage Device\" &gt; \"MQTT Server\". Enter the address of your MQTT broker in the \"Host\" field, fill in the port number, username, and password. The \"TLS\" selection switches between TSL/SSL link and the TCP link. Enter a SUBSCRIBE message in the \"Command\" field and a SUBACK acknowledgement message in the \"Respond Topic\" field. You can also click \"Update Certificate\" below to update the MQTT encryption certificate. Click \"Done\" on the upper right corner to save the settings.</p> Figure 16 Figure 17"},{"location":"ble_proxy/gl-s10/user_manual/#report-configuration","title":"Report Configuration","text":"<p>Click \"Report Configuration\" in the interface of \"Manage Device\" to enter the interface of \"Report Configuration\". </p> <p>Click \"Report interval\", \"Topic\", \"Bluetooth RSSI threshold filtering\" to enter the relevant information configuration interface, fill in the configuration information and click the upper left corner to return to the previous page to save your settings.  </p> <p>Click \u201cBLE MAC Filter\u201d, \u201cComplete Local Name Filter\u201d, or \u201cManufacturer Specific Data Filter\u201d at the bottom and enter the relevant information to activate the filter. </p> <p>Note: Filter Rules Instructions</p> <ul> <li> <p>MAC Filter: The value range is 0~f, the characters are lowercase, and colons must be included; the string should be full match.</p> </li> <li> <p>Complete Local Name Filter: the characters are case-sensitive,the string should be full match; for any unsure information, please download the nFR Connect software to check.</p> </li> <li> <p>Manufacture Specific Data Filter: The value range is 0~f/F, the characters are case-sensitive and should be matched according to regular expressions.</p> </li> </ul> <p>If you purchased a gateway kit with the BLE Beacon, you also have the option to set BLE MAC filtering rules for the beacon in the app by entering the BLE MAC address information printed on the bottom of the beacon. </p> <p>Click \"Add New Rule\" or \"Remove\" to edit the filter settings and click \"Done\" on the upper right corner to save the settings. </p> Figure 18 Figure 19 Figure 20 Figure 21"},{"location":"ble_proxy/gl-s10/user_manual/#data-time-configuration","title":"Data &amp; Time configuration","text":"<p>Click \"Manage Device\" &gt; \"Date &amp; Time\". Select your time zone, fill in the SNTP service address and click the upper left corner to return to the previous page to save your settings, as shown below. </p> Figure 22 Figure 23"},{"location":"ble_proxy/gl-s10/user_manual/#auto-reboot-configuration","title":"Auto Reboot configuration","text":"<p>Click \"Manage Device\" &gt; \"Auto Reboot\". You can schedule a time to reboot GL-S10 on a daily-basis. Click the upper left corner to return to the previous page to save your settings, as shown below. </p> Figure 24 Figure 25"},{"location":"ble_proxy/gl-s10/user_manual/#ota-upgrade","title":"OTA upgrade","text":"<p>Click \"Manage Device\" &gt; \"Upgrade OTA\". Under \"OTA URL\", enter the http server address and click \"Save\" on the upper right corner. Click \"Upgrade OTA\" to save the URL path and initiate the upgrade. Click \"Update Certificate\" to update the OTA encryption certificate as shown below. </p> <p>Please keep your GL-S10 connected to the internet and do NOT turn off the power during the OTA upgrade. After the OTA upgrade is completed, your GL-S10 will automatically enter Scanning mode, and your app will not be able to search for GL-S10.  </p> Figure 26 Figure 27 Figure 28 Figure 29"},{"location":"ble_proxy/gl-s10/user_manual/#reboot-device","title":"Reboot device","text":"<p>Click \"Manage Device\" &gt; \"Reboot\", and a pop-up window will ask for a reboot confirmation. The device will reboot after clicking \"Sure\". After rebooting, the device will automatically enter Scanning mode, and your app will not be able to search for GL-S10.</p> <p> Figure 30</p>"},{"location":"ble_proxy/gl-s10/user_manual/#reset-device","title":"Reset device","text":"<p>Click \"Manage Device\" &gt; \"Reset\". A pop-up window will ask for a reset confirmation. When you click \"Sure\", all device configurations will be restored to the factory default settings. After resetting the device, it will automatically enter Scanning mode, and your app will be able to search for GL-S10.</p> <p> Figure 31</p>"},{"location":"ble_proxy/gl-s10/user_manual/#mqtt-configuration_1","title":"MQTT Configuration","text":"<p>When the GL-S10 is connected to the MQTT server, you can also use the MQTT API to configure the GL-S10. </p> <p>You can configure MQTT using a third-party tool - MQTT X, downloadable from https://mqttx.app/. </p> <p>The default MQTT setting is configured to connect with the beta cloud platform. Enter the configuration for GL-S10 and MQTT X client to activate the connection. The beta cloud platform is for testing only and not for other usage. </p>"},{"location":"ble_proxy/gl-s10/user_manual/#network-configuration","title":"Network Configuration","text":"<p>GL-S10 supports wired transmission and Wi-Fi for connecting to the router or gateway. The setting procedure can be found in section 3.6 Cable configuration and 3.7 Wi-Fi configuration. </p>"},{"location":"ble_proxy/gl-s10/user_manual/#mqtt-x-client-configuration","title":"MQTT X client configuration","text":"<p>Before doing the MQTT X client configuration, we need to configure the configuration of the MQTT server on S10 first. Find MQTT Server session in the S10 Tool APP.</p> <p>Here we are using the test MQTT server: iot-s10-test.gl-inet.cn. And the Port is: 1884, so we need to set the Host in the following figure: iot-s10-test.gl-inet.cn. And set Port: 1884.</p> Figure 32 Figure 33 <p>On the windows version of the MQTT X client, start the MQTT X software and add a new connection. To configure the beta cloud platform, enter the URL address iot-s10-test.gl-inet.cn and port 1884. Click the upper right corner of the page to connect. A successful connection is shown below in Figure 33. </p> <p> Figure 34 Figure 35</p>"},{"location":"ble_proxy/gl-s10/user_manual/#mqtt-message-editing-and-communicating-with-s10","title":"MQTT Message Editing and Communicating with S10","text":"<p>The default command topic for this firmware is GL-IoT/comTopic/{dev_MAC}, and the command reply topic is GL-IoT/rspTopic/{dev_MAC}. </p> <p>The BLE MAC address of the GL-S10 device we use in this example is: E8DB841E2B1E (The BLE MAC address is printed on the bottom of the device or in the app). </p> <p>In our testing, MQTT X sends data via GL-IoT/comTopic/E8DB841E2B1E and receives data from GL-S10 by subscribing to GL-IoT/rspTopic/E8DB841E2B1E. </p> <p>Below is a demo of how to set data (SET_DEV_MESSAGE) and obtain data from GL-S10 (GET_DEV_MESSAGE):</p> <p>Step 1: Subscribe to the GL-IoT/rspTopic/E8DB841E2B1E topic using MQTT X.  Figure 36</p> <p>Step 2: SET_WIFI_CONFIG</p> <p>API Function: Configure SSID and PWD of WIFI or SSID, user name, user password of WIFI WPA2, and try to connect to the corresponding route. </p> <p>{</p> <p>\"jsonrpc\": \"2.0\",</p> <p>\"method\": \"SET_WIFI_CONFIG\",</p> <p>\"params\": {</p> <p>\"type\":0,</p> <p>\"ssid\": \"Test\",</p> <p>\"pwd\": \"123456\"</p> <p>},</p> <p>\"id\": 1</p> <p>}</p> <p>Here we use \"Test\" for the SSID  and \"123456\" for the user passward.</p> <ul> <li>When type is equal to 0, SSID, PASSWORD can be set.</li> <li>When type is equal to 1, SSID, USERNAME, USERPASSWORD can be set.</li> <li>SSID: route name, length 0 - 32 characters.</li> <li>PWD: route password, length 0 - 64 characters.</li> <li>USERNAME: User name, length 0 - 32 characters.</li> <li>USERPWD: User password, length 0 - 64 characters.</li> </ul> <p> Figure 37</p> <p>Set data successfully:</p> <p> Figure 38</p> <p>Step 3: GET_WIFI_CONFIG</p> <p>API Function: Get the SSID and PWD of WIFI or SSID, user name, user password of WIFI WPA2\\</p> <p>{</p> <p>\"jsonrpc\" :   \"2.0\" ,</p> <p>\"method\" :   \"GET_WIFI_CONFIG\" ,</p> <p>\"params\" :   {</p> <p>\"type\" : 0</p> <p>},</p> <p>\"id\" :   2</p> <p>}</p> <ul> <li>When type is equal to 0, get SSID, PASSWORD.</li> <li>When type is equal to 1, get SSID, USERNAME, USERPASSWORD </li> </ul> <p> Figure 39</p> <p>Get data successfully:  Figure 40</p>"},{"location":"ble_proxy/gl-s10/user_manual/#ble-data-uploading","title":"BLE Data Uploading","text":"<p>After successfully establishing connection, GL-S10 automatically enters Scanning mode and scans for BLE signal during startup. If the MQTT server is connected, the BLE scan data will be packaged and uploaded to \"GL-IoT/dataTopic/{dev_MAC}\" topic in JSON format. ({dev_MAC} is the local BLE MAC address, in this example, the BLE MAC address of the GL-S10 device used is: E8DB841E2B1E). </p> <p>As shown above, the JSON fields have the following definitions</p> <ul> <li>MAC : Broadcast source address </li> <li>rssi : Broadcast source signal strength </li> <li>n : Broadcast source device name (this field will not appear if the broadcast source does not have a name) </li> <li>ad : Broadcast data advData </li> <li>ts : receive timestamp</li> </ul> <p>If you purchased a gateway kit with a BLE Beacon and adds filtering rules for the beacon BLE MAC address according to section 3.9, the JSON information viewed here is the BLE information broadcast by the beacon. The beacons are placed at different distances from the GL-S10 gateway (distance up to the decimeter level), and the value of rssi (broadcast source signal strength) may fluctuate based on distance.   Figure 41</p> <p> Figure 42</p>"},{"location":"ble_proxy/gl-s10/user_manual/#gl-s10-config-api","title":"GL-S10 Config API","text":"<p>This chapter define the commands to configure the GL-S10 device using the MQTT method. Based on JSON_RPC 2.0 standard development, please follow the format.  Command summary sheet</p>"},{"location":"ble_proxy/gl-s10/user_manual/#command-summary-sheet","title":"Command summary sheet","text":"Command Code Command Whether parameters are required Description 0x01 SET_WIFI_CONFIG Y Set up Wi-Fi configuration 0x02 GET_WIFI_CONFIG N Get Wi-Fi configuration 0x03 SET_NETWORK_CONFIG Y Set static IP or dynamic IP 0x04 GET_NETWORK_CONFIG N Get static IP or dynamic IP 0x05 GET_NETWORK_STATE N Get the current network status 0x07 SET_MQTT_PARAMS Y Set MQTT URL 0x08 GET_MQTT_PARAMS N Get MQTT URL 0x0A SET_MQTT_TOPIC Y Set MQTT topic name 0x0B GET_MQTT_TOPIC N Get MQTT topic name 0x0C SET_MQTT_TI Y Set the MQTT data reporting time interval 0x0D GET_MQTT_TI N Get the MQTT data reporting time interval 0x0E SET_SNTP_TZ Y Set the SNTP server time zone 0x0F GET_SNTP_TZ N Get the SNTP server time zone 0x10 SET_SNTP_SERVER Y Set the SNTP server 0x11 GET_SNTP_SERVER N Get the SNTP server 0x12 SET_AUTO_REBOOT Y Set auto reboot time 0x13 GET_AUTO_REBOO N Get auto reboot time 0x14 SET_MAC_FILTER Y Add and remove MAC filter table entries 0x15 GET_MAC_FILTER Y Get MAC filter table entries 0x16 SET_CLN_FILTER Y Add and remove BLE Complete Local Name filter table entries 0x17 GET_CLN_FILTER N Get BLE Complete Local Name filter table entries 0x18 SET_MSD_FILTER Y Add and remove Manufacturer Specific Data filter table entries 0x19 GET_MSD_FILTER N Get Manufacturer Specific Data filter table entries 0x1A UPDATE_MQTT_CERT Y Update MQTT encryption certificates 0x1B UPDATE_WPA2_CERT Y Update Wi-Fi WPA2 encryption certificate 0x1C UPDATE_HTTPS_CERT Y Update HTTPS OTA encryption certificate 0x1D SET_OTA_URL Y Set the URL of the OTA server 0x1E GET_OTA_URL N Get the URL of the OTA server 0x1F OTA_STATUS N OTA upgrade status notification 0x20 GET_DEV_STATUS N Get device status 0x21 GET_DEV_MESSAGE N Get device message 0x22 RESTART_DEV N Reboot device 0x23 RESET_DEV N Reset device 0x24 SET_BLE_RSSI_FILTER Y Set RSSI filter thresholds 0x25 GET_BLE_RSSI_FILTER N Get RSSI filter thresholds 0x26 GET_WiFi_AP_LIST N Get a list of surrounding Wi-Fi AP information 0x27 SET_MQTT_CLIENT_ID Y Set mqtt client id 0x28 GET_MQTT_CLIENT_ID N Get mqtt client id 0x29 SET_BLE_SCAN_PARAMS Y Set ble scan param 0x2A GET_BLE_SCAN_PARAMS N Get ble scan param"},{"location":"ble_proxy/gl-s10/user_manual/#command-detail","title":"Command detail","text":""},{"location":"ble_proxy/gl-s10/user_manual/#set_wifi_config","title":"SET_WIFI_CONFIG","text":"<p>API function:  Configure the WiFi\u2019s SSID and password, or WiFi WPA2\u2019s SSID, username and password, then connect to the router. </p> <p>Data segment at reception: </p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"SET_WIFI_CONFIG\",\n    \"params\": {\n        \"type\": x,\n        ......\n    },\n    \"id\": 1\n}\n</code></pre> ID params 0x01 \"params\":{\"type\":0,\"ssid\":\"x\",\"pwd\":\"x\"} \"params\":{\"type\":1,\"ssid\":\"x\",\"username\":\"x\",\"userpwd\":\"x\"} <p>Note: </p> <ul> <li>When \"type\" filed is equal to 0x00, \"ssid\" and \"pwd\" fileds are configurable. </li> <li>When \"type\" filed is equal to 0x01, \"ssid\", \"username\", \"userpwd\" fileds are configurable. </li> <li>ssid: router\u2019s name, maximum length of 1-32 characters. </li> <li>pwd: router\u2019s password, maximum length of 8-64 characters. </li> <li>username: username, maximum length of 1-32 characters. </li> <li>userpwd: user password, maximum length 1-64 characters.</li> </ul> <p>Data segment at response: </p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": 0,\n    \"id\": 1\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 1\n}\n</code></pre> <p>Note: </p> <ul> <li>result: 0x00 represent execution success; 0x01 represent execution fail.</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#get_wifi_config","title":"GET_WiFi_CONFIG","text":"<p>API Function: </p> <p>Get Wi-Fi SSID and PWD, or Wi-Fi WPA2 SSID, user name, user password </p> <p>Data segment at reception: </p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"GET_WIFI_CONFIG\",\n    \"params\": {\n        \"type\": x\n    },\n    \"id\": 2\n}\n</code></pre> <p>Note:</p> <ul> <li>When \"type\" filed is equal to 0x00, get SSID, PASSWORD. </li> <li>When \"type\" filed is equal to 0x01, get SSID, USERNAME, USERPASSWORD.</li> </ul> <p>Data segment at response: </p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"type\": x,\n        ......\n    },\n    \"id\": 2\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 2\n}\n</code></pre> ID result 0x02 \"result\":{\"type\":0,\"ssid\":\"x\",\"pwd\":\"x\"} \"result\":{\"type\":1,\"ssid\":\"x\",\"username\":\"x\",\"userpwd\":\"x\"} <p>Note:</p> <ul> <li>When \"type\" filed is equal to 0x00, get SSID, PASSWORD. </li> <li>When \"type\" filed is equal to 0x01, get SSID, USERNAME, USERPASSWORD. </li> <li>ssid: router\u2019s name, maximum length of 1-32 characters. </li> <li>pwd: router\u2019s password, maximum length of 8-64 characters. </li> <li>username: username, length 1-32 characters. </li> <li>userpwd: user password, length 1-64 characters.</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#set_network_config","title":"SET_NETWORK_CONFIG","text":"<p>API function: </p> <p>Set static IP or dynamic IP. </p> <p>Data segment at reception:</p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"SET_NETWORK_CONFIG\",\n    \"params\": {\n        \"isdhcp\": \"x\",\n        ......\n    },\n    \"id\": 3\n}\n</code></pre> ID params 0x03 \"params\":{\"isdhcp\":1} \"params\":{\"isdhcp\":0,\"ip\":\"x\",\"netmask\":\"x\",\"gw\":\"x\"} <p>Note:</p> <ul> <li>When \"isdhcp\" filed is equal to 0x00, the device is set to DHCP auto-get IP mode.  </li> <li>When \"isdhcp\" filed is equal to 0x01, the device is set to static IP mode, and IP, Netmask, Gw can be set. </li> <li>ip: fixed length, xxx is a number between 0-255, format XXX.XXX.XXX.XXX. </li> <li>netmask: fixed length, xxx is a number between 0-255, format XXX.XXX.XXX.XXX. </li> <li>gw: fixed length, xxx is a number between 0-255, format XXX.XXX.XXX.XXX. </li> </ul> <p>Data segment at response: </p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": 0,\n    \"id\": 3\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 3\n}\n</code></pre> <p>Note: </p> <ul> <li>result: 0x00 represent execution success; 0x01 represent execution fail.</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#get_network_config","title":"GET_NETWORK_CONFIG","text":"<p>API Function: </p> <p>Get the network configuration of static IP or dynamic IP. </p> <p>Data segment at reception: </p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"GET_NETWORK_CONFIG\",\n    \"id\": 4\n}\n</code></pre> <p>Data segment at response: </p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"isdhcp\": x,\n        \"ip\": \"x\",\n        \"netmask\": \"x\",\n        \"gw\": \"x\"\n    },\n    \"id\": 4\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 4\n}\n</code></pre> <p>Note:</p> <ul> <li>When \"isdhcp\" filed is equal to 0x00, it indicates that the device is in DHCP auto-assignment state, and the data behind is empty. </li> <li>When \"isdhcp\" filed is equal to 0x01, it indicates that the device is in static IP allocation state, and available to receive IP, Netmask, and Gw. </li> <li>ip: fixed length, xxx is a number from 0-255, format XXX.XXX.XXX. </li> <li>netmask: fixed length, xxx is a number from 0-255, format XXX.XXX.XXX.XXX. </li> <li>gw: fixed length, xxx is a number from 0-255, format XXX.XXX.XXX.XXX. </li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#get_network_state","title":"GET_NETWORK_STATE","text":"<p>API Function: </p> <p>Get the current network state: State, Mode, isDhcp , IP, SSID. </p> <p>Data segment at reception: </p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"GET_NETWORK_STATE\",\n    \"id\": 5\n}\n</code></pre> <p>Data segment at response: </p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"state\": x,\n        \"mode\": \"x\",\n        \"isdhcp\": \"x\",\n        \"ip\": \"x\",\n        \"ssid\": \"x\"\n    },\n    \"id\": 5\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 5\n}\n</code></pre> <p>Note:</p> <ul> <li>state: indicates the status of the connection (MQTT server connection), 0 means connected, 1 means disconnected, occupies one byte. </li> <li>mode: indicates the connection mode, character '0' indicates connection via Wi-Fi, character '1' indicates connection via Ethernet cable, occupies one byte. </li> <li>isdhcp: character '0' means it is automatically assigned, character '1' means it is not automatically assigned, occupies one byte. </li> <li>ip: local IP address, xxx is a number between 0-255, format XXX.XXX.XXX.XXX. </li> <li>ssid: SSID of the connected router, length 1-32 characters. </li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#set_mqtt_params","title":"SET_MQTT_PARAMS","text":"<p>API function: </p> <p>Set MQTT Safety\u3001Host\u3001Port\u3001Username\u3001Password.</p> <p>Data segment at reception: </p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"SET_MQTT_PARAMS\",\n    \"params\": {\n        \"safety\": x,\n        \"host\": \"x\",\n        \"port\": x,\n        \"username\": \"x\",\n        \"password\": \"x\"\n    },\n    \"id\": 7\n}\n</code></pre> <p>Note:</p> <ul> <li> <p>safety: Indicates whether mqtt is connected through TSL/SSL, 0 means no, 1 means yes.</p> </li> <li> <p>host : Host name, length 7-128 characters</p> </li> <li> <p>port \uff1aHost port, range 0-65535</p> </li> <li> <p>username : Username, length 0-32 characters</p> </li> <li> <p>password : User password, length 0-64 characters</p> </li> </ul> <p>Data segment at response: </p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": 0,\n    \"id\": 7\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 7\n}\n</code></pre> <p>Note: </p> <ul> <li>result: 0x00 represent execution success; 0x01 represent execution fail.</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#get_mqtt_params","title":"GET_MQTT_PARAMS","text":"<p>API Function: </p> <p>Get MQTT Safety\u3001Host\u3001Port\u3001Username\u3001Password.</p> <p>Data segment at reception:</p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"GET_MQTT_PARAMS\",\n    \"id\": 8\n}\n</code></pre> <p>Data segment at response: </p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"safety\": x,\n        \"host\": \"x\",\n        \"port\": x,\n        \"username\": \"x\",\n        \"password\": \"x\"\n    },\n    \"id\": 8\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 8\n}\n</code></pre> <p>Note:</p> <ul> <li>safety: Indicates whether mqtt is connected through TSL/SSL, 0 means no, 1 means yes.</li> <li>host : Host name, length 7-128 characters</li> <li>port \uff1aHost port, range 0-65535</li> <li>username : Username, length 0-32 characters</li> <li>password : User password, length 0-64 characters</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#set_mqtt_topic","title":"SET_MQTT_TOPIC","text":"<p>API function: </p> <p>Configure comTopic, dataTopic and rspTopic topics. </p> <p>Data segment on reception. </p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"SET_MQTT_TOPIC\",\n    \"params\": {\n        \"comtopic\": \"x\",\n        \"datatopic\": \"x\",\n        \"rsptopic\": \"x\"\n    },\n    \"id\": 10\n}\n</code></pre> <p>Note:</p> <ul> <li>comtopic: command for subscribing a topic, does not support Chinese, length 1-128 characters. </li> <li>datatopic: publishing a topic, does not support Chinese, maximum length of 1-128 characters. </li> <li>rsptopic: Unsuback a topic, does not support Chinese, maximum length of 1-128 characters. </li> </ul> <p>Data segment at response: </p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": 0,\n    \"id\": 8\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 8\n}\n</code></pre> <p>Note:</p> <ul> <li>result: 0x00 represent execution success; 0x01 represent execution fail.</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#get_mqtt_topic","title":"GET_MQTT_TOPIC","text":"<p>API Function: </p> <p>Get comTopic, dataTopic and rspTopic topics. </p> <p>Data segment at reception: </p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"GET_MQTT_TOPIC\",\n    \"id\": 11\n}\n</code></pre> <p>Data segment at response: </p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"comtopic\": \"x\",\n        \"datatopic\": \"x\",\n        \"rsptopic\": \"x\"\n    },\n    \"id\": 11\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 11\n}\n</code></pre> <p>Note:</p> <ul> <li>comtopic: command for subscribing a topic, does not support Chinese, length 1-128 characters </li> <li>datatopic: publishing a topic, does not support Chinese, maximum length of 1-128 characters </li> <li>rsptopic: Unsuback a topic, does not support Chinese, maximum length of 1-128 characters</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#set_mqtt_ti","title":"SET_MQTT_TI","text":"<p>API Function: </p> <p>Set the MQTT data upload time interval. </p> <p>Data segment at reception:</p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"SET_MQTT_TI\",\n    \"params\": {\n        \"intervaltime\": x\n    },\n    \"id\": 12\n}\n</code></pre> <p>Note:</p> <ul> <li>intervaltime: MQTT data reporting time interval, 1s - 2147483647s.</li> </ul> <p>Data segment at response: </p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": 0,\n    \"id\": 12\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 12\n}\n</code></pre> <p>Note:</p> <ul> <li>result: 0x00 represent execution success; 0x01 represent execution fail.</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#get_mqtt_ti","title":"GET_MQTT_TI","text":"<p>API Function: </p> <p>Get the MQTT data upload interval. </p> <p>Data segment at reception:</p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"GET_MQTT_TI\",\n    \"id\": 13\n}\n</code></pre> <p>Data segment at response:  <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"intervaltime\": \"x\"\n    },\n    \"id\": 13\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 13\n}\n</code></pre></p> <p>Note:</p> <ul> <li>intervaltime: MQTT data reporting time interval, 1s \u20132147483647s.</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#set_sntp_tz","title":"SET_SNTP_TZ","text":"<p>API function: </p> <p>Set the device time zone. </p> <p>Data segment at reception: </p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"SET_SNTP_TZ\",\n    \"params\": {\n        \"timezone\": \"x\"\n    },\n    \"id\": 14\n}\n</code></pre> <p>Note:</p> <ul> <li>timezone: Time zone format, UTC+X or UTC-X (X range 0-12), default Timezone = UTC+8. </li> </ul> <p>Data segment at response: </p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": 0,\n    \"id\": 14\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 14\n}\n</code></pre> <p>Note:</p> <ul> <li>result: 0x00 represent execution success; 0x01 represent execution fail.</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#get_sntp_tz","title":"GET_SNTP_TZ","text":"<p>API Function: </p> <p>Get the device time zone. </p> <p>Data segment at reception: </p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"GET_SNTP_TZ\",\n    \"id\": 15\n}\n</code></pre> <p>Data segment at response: </p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"timezone\": \"x\"\n    },\n    \"id\": 15\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 15\n}\n</code></pre> <p>Note:</p> <ul> <li>timezone: Time zone format, UTC+X or UTC-X (X range 0-12), default Timezone = UTC-8.</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#set_sntp_server","title":"SET_SNTP_SERVER","text":"<p>API function: </p> <p>Set the SNTP server address. </p> <p>Data segment at reception:</p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"SET_SNTP_SERVER\",\n    \"params\": {\n        \"serverurl\": \"x\"\n    },\n    \"id\": 16\n}\n</code></pre> <p>Note:</p> <ul> <li>serverurl: SNTP server URL setting, maximum length of 1-128 characters. </li> </ul> <p>Data segment at response:</p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": 0,\n    \"id\": 16\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 16\n}\n</code></pre> <p>Note:</p> <ul> <li>result: 0x00 represent execution success; 0x01 represent execution fail.</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#get_sntp_server","title":"GET_SNTP_SERVER","text":"<p>API Function: </p> <p>Get the SNTP server address. </p> <p>Data segment at reception:</p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"GET_SNTP_SERVER\",\n    \"id\": 17\n}\n</code></pre> <p>Data segment at response: </p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"serverurl\": \"x\"\n    },\n    \"id\": 17\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 17\n}\n</code></pre> <p>Note:</p> <ul> <li>serverurl: SNTP server URL setting, maximum length of 1-128 characters.</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#set_auto_reboot","title":"SET_AUTO_REBOOT","text":"<p>API Function: </p> <p>Set the auto restart time and switch status. </p> <p>Data segment at reception:</p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"SET_AUTO_REBOOT\",\n    \"params\": {\n        \"rststate\": x,\n        \"rsttime\": \"x\"\n    },\n    \"id\": 18\n}\n</code></pre> <p>Note:</p> <ul> <li>rststate: indicates whether to turn on the daily restart, 0 means turn on, 1 means turn off, occupies one byte. </li> <li>rsttime: daily restart time, format XX:XX 24 hours, range 00:00 - 23:59, occupies five bytes. </li> </ul> <p>Data segment at response:</p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": 0,\n    \"id\": 18\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 18\n}\n</code></pre> <p>Note:</p> <ul> <li>result: 0x00 represent execution success; 0x01 represent execution fail.</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#get_auto_reboot","title":"GET_AUTO_REBOOT","text":"<p>API Function: </p> <p>Get the auto restart time and switch status. </p> <p>Data segment at reception:</p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"GET_AUTO_REBOOT\",\n    \"id\": 19\n}\n</code></pre> <p>Note:</p> <ul> <li>Data is equal to null. </li> </ul> <p>Data segment at response: </p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"rststate\": x,\n        \"rsttime\": \"x\"\n    },\n    \"id\": 19\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 19\n}\n</code></pre> <p>Note:</p> <ul> <li>rststate: indicates whether to turn on the daily restart, 0 means turn on, 1 means not turn on, takes up one byte. </li> <li>rsttime: daily restart time, format XX:XX 24 hours, range 00:00 - 23:59, occupies five bytes.</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#set_mac_filter","title":"SET_MAC_FILTER","text":"<p>API Function: </p> <p>Add or remove MAC filter table entries. </p> <p>Data segment on reception.</p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"SET_MAC_FILTER\",\n    \"params\": {\n        \"mode\": x,\n        \"mac\": \"x\"\n    },\n    \"id\": 20\n}\n</code></pre> <p>Note:</p> <ul> <li>mode: 0x00 is Add mode, which adds the MAC field to the MAC table of the device; 0x01 is Delete mode, which removes the MAC field from the MAC table. </li> <li>mac: Format XX:XX:XX:XX:XX:XX, XX range [0-9a-fA-F].</li> </ul> <p>Data segment at response: </p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": 0,\n    \"id\": 20\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 20\n}\n</code></pre> <p>Note:</p> <ul> <li>result: 0x00 represent execution success; 0x01 represent execution fail.</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#get_mac_filter","title":"GET_MAC_FILTER","text":"<p>API Function: </p> <p>Get MAC filter table entries. </p> <p>Data segment at reception: </p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"GET_MAC_FILTER\",\n    \"id\": 21\n}\n</code></pre> <p>Note:</p> <ul> <li>Data is equal to null. </li> </ul> <p>Data segment at response: </p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": [\n        \"x\",\n        \"x\",\n        ......\n    ],\n    \"id\": 21\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 21\n}\n</code></pre> <p>Note:</p> <ul> <li>result:  It is a array, it will get all the mac in the MAC filter table, single format XX:XX:XX:XX:XX:XX, XX range [0-9a-fA-F].</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#set_cln_filter","title":"SET_CLN_FILTER","text":"<p>API Function: </p> <p>Adds or removes a BLE device name filter table entry. </p> <p>Data segment at reception: </p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"SET_CLN_FILTER\",\n    \"params\": {\n        \"mode\": x,\n        \"cln\": \"x\"\n    },\n    \"id\": 22\n}\n</code></pre> <p>Note:</p> <ul> <li>mode: 0x00 is Add mode, which adds the AddCLN field to the device's BLE device name table; 0x01 is Delete mode, which removes the AddCLN field from the BLE device name table. </li> <li>cln: Single device name, length 1-32 characters. </li> </ul> <p>Data segment at response:</p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": 0,\n    \"id\": 22\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 22\n}\n</code></pre> <p>Note:</p> <ul> <li>result: 0x00 represent execution success; </li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#get_cln_filter","title":"GET_CLN_FILTER","text":"<p>API Function: </p> <p>Get the BLE device name filter table entry. </p> <p>Data segment at reception: </p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"GET_CLN_FILTER\",\n    \"id\": 23\n}\n</code></pre> <p>Note:</p> <ul> <li>Data is equal to null</li> </ul> <p>Data segment at response:</p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": [\n        \"x\",\n        \"x\",\n        ......\n    ],\n    \"id\": 23\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 23\n}\n</code></pre> <p>Note:</p> <ul> <li>result:  It is a array, it will get all the Complete Local Name in the CLN filter table.</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#set_msd_filter","title":"SET_MSD_FILTER","text":"<p>API Function: </p> <p>Add or remove BLE vendor custom data filter table entries. </p> <p>Data segment on reception.</p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"SET_MSD_FILTER\",\n    \"params\": {\n        \"mode\": x,\n        \"msd\": \"x\",\n    },\n    \"id\": 24\n}\n</code></pre> <p>Note:</p> <ul> <li>mode: 0x00 is Add mode which adds the AddMSD field to the device's BLE vendor custom data table; 0x01 is Delete mode which removes the AddMSD field from the BLE vendor custom data table. </li> <li>msd: single BLE vendor-defined data, length 2-64 characters, and length must be a multiple of 2, character range [0-9a-fA-F].</li> </ul> <p>Data segment at response:</p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": 0,\n    \"id\": 24\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 24\n}\n</code></pre> <p>Note:</p> <ul> <li>result: 0x00 represent execution success; 0x01 represent execution fail.</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#get_msd_filter","title":"GET_MSD_FILTER","text":"<p>API Function: </p> <p>Get BLE vendor custom data filter table entries. </p> <p>Data segment on reception.</p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"GET_MSD_FILTER\",\n    \"id\": 25\n}\n</code></pre> <p>Note:</p> <ul> <li>Data is equal to null</li> </ul> <p>Data segment at response:</p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"addmsd0\": \"x\",\n        \"addmsd1\": \"x\",\n        ......\n    },\n    \"id\": 25\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 25\n}\n</code></pre> <p>Note:</p> <ul> <li>result: It is a object, and addmsd0, addmsd1 is single MSD, all data in the MSD filtering table will be packaged and sent together.</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#update_mqtt_cert","title":"UPDATE_MQTT_CERT","text":"<p>API functionality: </p> <p>Update MQTT encryption certificate. </p> <p>Data segment at reception:</p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"UPDATE_MQTT_CERT\",\n    \"params\": {\n        \"mode\": x,\n        \"mqttcerturl\": \"x\"\n    },\n    \"id\": 26\n}\n</code></pre> <p>Note:</p> <ul> <li> <p>mode: 0x00 updates certificate immediately, 0x01 only saves certificate URL, and does not update certificate immediately. </p> </li> <li> <p>mqttcerturl: MQTT encrypted certificate URL address, length 1-512characters. </p> </li> </ul> <p>Note: If the Data segment is null, the MqttCertURL will be restored to the default configuration, and the certificate will be updated. </p> <p>Data segment at response:</p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": 0,\n    \"id\": 26\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 26\n}\n</code></pre> <p>Note:</p> <ul> <li>result: 0x00 represent execution success; 0x01 represent execution fail.</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#update_wpa2_cert","title":"UPDATE_WPA2_CERT","text":"<p>API function: </p> <p>Update Wi-Fi WPA2 encryption certificate. </p> <p>Data segment at reception: </p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"UPDATE_WPA2_CERT\",\n    \"params\": {\n        \"mode\": x,\n        \"wpa2certurl\": \"x\"\n    },\n    \"id\": 27\n}\n</code></pre> <p>Note:</p> <ul> <li> <p>mode: 0x00 updates certificate immediately, 0x01 only saves certificate URL, and does not update certificate immediately. Occupies 1 character. </p> </li> <li> <p>wpa2certurl: WPA2 encryption certificate URL address, length 1-512characters. </p> </li> </ul> <p>Note: If the Data segment is null, the Wpa2CertURL will be restored to the default configuration, and the certificate will be updated. </p> <p>Data segment at response: </p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": 0,\n    \"id\": 27\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 27\n}\n</code></pre> <p>Note:</p> <ul> <li>result: 0x00 represent execution success; 0x01 represent execution fail.</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#update_https_cert","title":"UPDATE_HTTPS_CERT","text":"<p>API functions: </p> <p>Update HTTPS encryption certificate. </p> <p>Data segment at reception:</p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"UPDATE_HTTPS_CERT\",\n    \"params\": {\n        \"mode\": x,\n        \"httpscerturl\": \"x\"\n    },\n    \"id\": 28\n}\n</code></pre> <p>Note:</p> <ul> <li> <p>mode: 0x00 updates certificate immediately, 0x01 only saves certificate URL, and does not update certificate immediately. Occupies 1 character. </p> </li> <li> <p>httpscerturl: HTTPS encrypted certificate URL address, length 1-512 characters. </p> </li> </ul> <p>Note: If the Data segment is null, the HttpsCertURL will be restored to the default configuration, and the certificate will be updated.</p> <p>Data segment at response: </p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": 0,\n    \"id\": 28\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 28\n}\n</code></pre> <p>Note:</p> <ul> <li>result: 0x00 represent execution success; 0x01 represent execution fail.</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#set_ota_url","title":"SET_OTA_URL","text":"<p>API function: </p> <p>Set the OTA URL. </p> <p>Data segment at reception:</p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"SET_OTA_URL\",\n    \"params\": {\n        \"updatenow\": x,\n        \"otaurl\": \"x\"\n    },\n    \"id\": 29\n}\n</code></pre> <p>Note:</p> <ul> <li>updatenow: whether to upgrade OTA immediately, occupies 1 byte, 0 will save the URL and upgrade immediately, 1 will only save the url without upgrading. </li> <li>otaurl: the server link for OTA upgrade, length 1-512 characters. </li> <li>If the Data segment is null, OtaURL will be restored to the default configuration, but will not trigger OTA. </li> </ul> <p>Data segment at response: </p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": 0,\n    \"id\": 29\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 29\n}\n</code></pre> <p>Note:</p> <ul> <li>result: 0x00 represent execution success; 0x01 represent execution fail.</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#get_ota_url","title":"GET_OTA_URL","text":"<p>API Function: </p> <p>Get the OTA URL. </p> <p>Data segment at reception: </p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"GET_OTA_URL\",\n    \"id\": 30\n}\n</code></pre> <p>Data segment at response: </p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"otaurl\": \"x\"\n    },\n    \"id\": 30\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 30\n}\n</code></pre> <p>Note:</p> <ul> <li>otaurl: the server link of OTA upgrade, length 1-512 characters.</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#ota_status","title":"OTA_STATUS","text":"<p>API function: </p> <p>Reply result after OTA completion, initiated by the device after OTA completion. </p> <p>Data segment at response: </p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"result\": 0,\n    \"id\": 31\n}\n</code></pre> <p>Note:</p> <ul> <li>result: 0x00 represent execution success; 0x01 represent execution fail.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#get_dev_status","title":"GET_DEV_STATUS","text":"<p>API Function: </p> <p>Get device Wi-Fi RSSI, networking status, server connection status. </p> <p>Data segment at reception:</p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"GET_DEV_STATUS\",\n    \"id\": 32\n}\n</code></pre> <p>Data segment at response: </p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"wifirssi\": x,\n        \"isconnectnetwork\": x,\n        \"isconnectserver\": x,\n        \"wifimode\": x\n    },\n    \"id\": 32\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 32\n}\n</code></pre> <p>Note:</p> <ul> <li>wifirssi: RSSI of the connected router, range -96 ~ 0.</li> <li>isconnectnetwork: network connection status 0x00 means not connected; 0x01 means connected. </li> <li>isconnectserver: MQTT server connection status 0x00 means not connected; 0x01 means connected. </li> <li>wifimode: Wi-Fi connection mode [0x00 -&gt; no password] [0x01 -&gt; wpa2 personal encryption] [0x02 -&gt; wpa2 enterprise encryption]</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#get_dev_message","title":"GET_DEV_MESSAGE","text":"<p>API Function: </p> <p>Get device Wi-Fi MAC, BLE MAC, SN, Device ID, firmware version number. </p> <p>Data segment at reception: </p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"GET_DEV_MESSAGE \",\n    \"id\": 33\n}\n</code></pre> <p>Data segment at response: </p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"wifimac\": \"x\",\n        \"blemac\": \"x\",\n        \"sn\": \"x\",\n        \"deviceid\": \"x\",\n        \"firmwareversion\": \"x\",\n        \"firmwaretype\": x\n    },\n    \"id\": 33\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 33\n}\n</code></pre> <p>Note:</p> <ul> <li>wifimac: Format XX:XX:XX:XX:XX:XX, XX range [0-9a-fA-F]. </li> <li>blemac: Format XX:XX:XX:XX:XX:XX:XX , XX range [0-9a-fA-F]. </li> <li>sn: Device SN code, length 16 characters. </li> <li>deviceid: device ID code, length 7 characters. </li> <li>firmwareversion: firmware version number, length 0-32 characters.</li> <li>firmwaretype:  0 mean standard firmware\uff0c1 mean aws firmware.</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#restart_dev","title":"RESTART_DEV","text":"<p>API function: </p> <p>Reboot the device. </p> <p>Data segment at reception: </p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"RESTART_DEV\",\n    \"id\": 34\n}\n</code></pre> <p>Note:</p> <ul> <li>Data is equal to null</li> </ul> <p>Data segment at response: </p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": 0,\n    \"id\": 34\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 34\n}\n</code></pre> <p>Note:</p> <ul> <li>result: 0x00 represent execution success; 0x01 represent execution fail.</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#reset_dev","title":"RESET_DEV","text":"<p>API function: </p> <p>Reset the device.</p> <p>Data segment at reception: </p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"RESET_DEV\",\n    \"id\": 35\n}\n</code></pre> <p>Data segment at response: </p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": 0,\n    \"id\": 35\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 35\n}\n</code></pre> <p>Note:</p> <ul> <li>result: 0x00 represent execution success; 0x01 represent execution fail.</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#set_ble_rssi_filter","title":"SET_BLE_RSSI_FILTER","text":"<p>API function: </p> <p>Set the BLE_RSSI filter threshold. </p> <p>Data segment at reception:</p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"SET_BLE_RSSI_FILTER\",\n    \"params\": {\n        \"blerssifilter\": x\n    },\n    \"id\": 36\n}\n</code></pre> <p>Note:</p> <ul> <li>blerssifilter:  Range -100 ~ 0. Default value: -100 </li> </ul> <p>Data segment at response: </p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": 0,\n    \"id\": 36\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 36\n}\n</code></pre> <p>Note:</p> <ul> <li>result: 0x00 represent execution success; 0x01 represent execution fail.</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#get_ble_rssi_filter","title":"GET_BLE_RSSI_FILTER","text":"<p>API Function: </p> <p>Get the BLE_RSSI filter threshold. </p> <p>Data segment at reception:</p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"GET_BLE_RSSI_FILTER\",\n    \"id\": 37\n}\n</code></pre> <p>Data segment at response: </p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"blerssifilter\": x\n    },\n    \"id\": 37\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 37\n}\n</code></pre> <p>Note:</p> <ul> <li>blerssifilter: Range -100 ~ 0.</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#get_wifi_ap_list","title":"GET_WiFi_AP_LIST","text":"<p>API Function: </p> <p>Get the list of surrounding Wi-Fi AP information. </p> <p>Data segment at reception:</p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"GET_WiFi_AP_LIST \",\n    \"id\": 38\n}\n</code></pre> <p>Data segment at response: </p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"WIFI_AP_LIST\": [\n            {\"SSID\":\"XXXX\",\"RSSI\":XXX,\"authMode\":X},\n            {\"SSID\":\"XXXX\",\"RSSI\":XXX,\"authMode\":X},\n            {\"SSID\":\"XXXX\",\"RSSI\":XXX,\"authMode\":X},\n            ......\n        ]\n    },\n    \"id\": 38\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 38\n}\n</code></pre> <p>Note:</p> <ul> <li> <p>error: It is an object that will contain error codes and messages.</p> </li> <li> <p>SSID: router name, in string form, valid length 0-32 </p> </li> <li> <p>RSSI: Routing signal strength, numeric type, valid range -96 ~ 0. </p> </li> <li> <p>authMode: Routing encryption method, numeric type, valid range 0 ~ 7. See the following table for the meaning.</p> </li> </ul> num authMode 0 authenticate mode : open 1 authenticate mode : WEP 2 authenticate mode : WPA_PSK 3 authenticate mode : WPA2_PSK 4 authenticate mode : WPA_WPA2_PSK 5 authenticate mode : WPA2_ENTERPRISE 6 authenticate mode : WPA3_PS 7 authenticate mode : WPA2_WPA3_PSK - default"},{"location":"ble_proxy/gl-s10/user_manual/#set_mqtt_client_id","title":"SET_MQTT_CLIENT_ID","text":"<p>API Function: </p> <p>Get the BLE_RSSI filter threshold. </p> <p>Data segment at reception:</p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"SET_MQTT_CLIENT_ID\",\n    \"params\": {\n        \"mqttclientid\": \"x\"\n    }\n    \"id\": 39\n}\n</code></pre> <p>Note:</p> <ul> <li>mqttclientid: device mqtt client id, effective length is 1-128 bytes.</li> </ul> <p>Data segment at response: </p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": 0,\n    \"id\": 39\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 39\n}\n</code></pre> <p>Note:</p> <ul> <li>result: 0x00 represent execution success; 0x01 represent execution fail.</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#get_mqtt_client_id","title":"GET_MQTT_CLIENT_ID","text":"<p>API Function: </p> <p>Get the BLE_RSSI filter threshold. </p> <p>Data segment at reception:</p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"GET_MQTT_CLIENT_ID\",\n    \"id\": 40\n}\n</code></pre> <p>Data segment at response: </p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"mqttclientid\": \"x\"\n    },\n    \"id\": 40\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 40\n}\n</code></pre> <p>Note:</p> <ul> <li>mqttclientid: device mqtt client id, effective length is 1-128 bytes.</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#set_ble_scan_params","title":"SET_BLE_SCAN_PARAMS","text":"<p>API Function: </p> <p>Get the BLE_RSSI filter threshold. </p> <p>Data segment at reception:</p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"SET_BLE_SCAN_PARAMS\",\n    \"params\": {\n        \"scantype\": x,\n        \"scaninterval\": x,\n        \"scanwindow\": x\n    }\n    \"id\": 41\n}\n</code></pre> <p>Note:</p> <ul> <li>scantype: 0 mean passive scan type, 1 mean active scan type.</li> <li>scaninterval: The scanning interval is defined as the time from when the controller starts the last LE scan until subsequent LE scans begin. Range: 4-16384, default value: 80 (50ms), time=N * 0.625 m, time range: 2.5 ms~10240ms.</li> <li>scanwindow: Scan window, duration of LE scan. LE_ Scan_ Window should be less than or equal to LE_ Scan_ Interval. Range: 4-16384, default value: 48 (30ms), time=N * 0.625 ms, time range: 2.5 ms~10240ms.</li> </ul> <p>Data segment at response: </p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": 0,\n    \"id\": 41\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 41\n}\n</code></pre> <p>Note:</p> <ul> <li>result: 0x00 represent execution success; 0x01 represent execution fail.</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"ble_proxy/gl-s10/user_manual/#get_ble_scan_params","title":"GET_BLE_SCAN_PARAMS","text":"<p>API Function: </p> <p>Get the BLE_RSSI filter threshold. </p> <p>Data segment at reception:</p> <pre><code>{\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"GET_BLE_SCAN_PARAMS\",\n    \"id\": 42\n}\n</code></pre> <p>Data segment at response: </p> <pre><code>// success reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"result\": {\n        \"scantype\": x,\n        \"scaninterval\": x,\n        \"scanwindow\": x\n    },\n    \"id\": 42\n}\n\n// fail reply\n{\n    \"jsonrpc\": \"2.0\",\n    \"error\": {\n        \"code\": x,\n        \"message\": \"x\"\n    },\n    \"id\": 42\n}\n</code></pre> <p>Note:</p> <ul> <li>scantype: 0 mean passive scan type, 1 mean active scan type.</li> <li>scaninterval: The scanning interval is defined as the time from when the controller starts the last LE scan until subsequent LE scans begin. Range: 4-16384, default value: 80 (50ms), time=N * 0.625 m, time range: 2.5 ms~10240ms.</li> <li>scanwindow: Scan window, duration of LE scan. LE_ Scan_ Window should be less than or equal to LE_ Scan_ Interval. Range: 4-16384, default value: 48 (30ms), time=N * 0.625 ms, time range: 2.5 ms~10240ms.</li> <li>error: It is an object that will contain error codes and messages.</li> </ul>"},{"location":"iot_dev_board/","title":"GL DEV BOARD","text":"<p>In order to give users a more intuitive experience of the thread network functions, we have developed a set of Thread development boards. The GL DEV BOARD is a page dedicated to controlling the Thread development board for GL development and displaying relevant data.</p>"},{"location":"iot_dev_board/#devices","title":"Devices","text":"<p>The TDB(GL Thread DEV Board) can join the network by using thread Commissioning, but you need to know the EUI64 of the TDB and the device pre-shared key PSKd. To simplify the configuration process, we have pre-built fixed keys in the firmware, which can be added quickly as follows.</p>"},{"location":"iot_dev_board/#add-tdb-to-the-network","title":"Add TDB to the network","text":"<ol> <li> <p>Click on Add Devices.</p> </li> <li> <p>Click on Allow New Devices To Join and Click on Apply.</p> <p></p> </li> <li> <p>Power up the TDB, press and hold SW2 for three seconds or more to restore the factory settings, then press SW2 briefly. You can see the green light flashing.</p> </li> <li> <p>When the green light of the development board is always on, it means that it successfully joins the network.</p> </li> <li> <p>The first time a device is successfully added, the web page will automatically pop up New Devices to prompt for configuration Type/Name information</p> <p></p> <ul> <li>Type: If theTDB comes with an A0 board, please select \"A0+A1\".</li> <li>Name: User defined names.</li> </ul> </li> <li> <p>You can see that the development board was successfully added to the Online card.</p> <p></p> </li> </ol>"},{"location":"iot_dev_board/#control-tdb","title":"Control TDB","text":""},{"location":"iot_dev_board/#device-detail","title":"Device Detail","text":"<p>You can view the current data of the TDB on the Device Detail page.</p> <p></p>"},{"location":"iot_dev_board/#view-records","title":"View Records","text":"<p>You can view a graph of the TDB's historical data on the View Records page.</p> <p></p>"},{"location":"iot_dev_board/#edit-device","title":"Edit Device","text":"<p>You can edit the settings of the TDB on the Edit Device page.</p> <p></p>"},{"location":"iot_dev_board/#code-examples","title":"Code Examples","text":"<p>We have prepared some sample code to control the TDB. You can run them in the S200 backend, or write your own applications by referring to these examples.</p> <p></p>"},{"location":"iot_dev_board/#reset-device","title":"Reset Device","text":"<p>If you want to remove the TDB from the network, use the reset device function. </p> <p></p> <p>Note: This will restore the TDB to its factory settings.</p>"},{"location":"iot_dev_board/#automations","title":"Automations","text":"<p>To enable users to better test the thread network in real-life situations, we offer some simple, restricted device linkage functions.</p> <p></p>"},{"location":"iot_dev_board/#add-an-automation-with-device-action","title":"Add an automation with device action","text":"<p>As an example, create an automation example: press a button on either board and the RGB lights on/off on both boards.</p> <ol> <li> <p>Create a name</p> <p></p> </li> <li> <p>Select type of trigger conditions</p> <p></p> </li> <li> <p>Select the device(s) to be used as an trigger.</p> <p></p> </li> <li> <p>Select trigger conditions</p> <p></p> </li> <li> <p>Select the type of operation</p> <p></p> </li> <li> <p>Select the device(s) to be used as an actuator</p> <p></p> </li> <li> <p>Select actuator's actions</p> <p></p> </li> <li> <p>You can see the automation cards that have been created.</p> <p></p> </li> </ol>"},{"location":"iot_dev_board/#add-an-automation-with-webhook","title":"Add an automation with webhook","text":"<p>A webhook in web development is a method of augmenting or altering the behavior of a web page or web application with custom callbacks.</p> <p>As an example, I need TDB for home security alarms. When someone enters, send a message to Discord via webhook.</p> <ol> <li> <p>Create a webhook url from Discord</p> <p>Please refer to the official Discord documentation. Please copy the url of the webhook, the next steps need to use.</p> </li> <li> <p>Fellow the steps below to create an automation.</p> <p></p> <p>Give it a name for the automation.</p> <p></p> <p>Select Sensor trigger.</p> <p></p> <p>Select devices.</p> <p></p> <p>Select trigger condition.</p> <p></p> <p>Select Webhook.</p> <p></p> <p>Paste the url you got when you created the webhook.</p> <p></p> <p>Enter the message you wish to send to Discord. Discord specifies that the message sent provide a value for at least one of content, embeds, components, or file.</p> <p>Note: Different Internet applications have their own definitions for the content and format of messages, please refer to the relevant documentation.</p> <p>Finally, an Automation that triggers the webhook is successfully created.</p> <p></p> <p>When the TDB's pyroelectric infrared sensor is triggered, the GL-S200 sends the specified message to the webhook that is set up.</p> <p></p> </li> </ol> <p>Still have questions? Visit our Community Forum.</p>"},{"location":"iot_dev_board/using_tdb_on_gl-s20/","title":"How to use GL.iNet Thread Development Boards with GL-S20","text":"<p>To use GL.iNet Thread Development Boards with GL-S20, you will need these devices: </p> <ul> <li>A GL-S20 Thread Border Router</li> <li>At least two GL.iNet Thread Development Boards</li> </ul> <p>Please refer to the following steps.</p>"},{"location":"iot_dev_board/using_tdb_on_gl-s20/#set-up-a-thread-network","title":"Set up a Thread network","text":"<ol> <li> <p>Power on the GL-S20.</p> </li> <li> <p>Connect the WAN port of the GL-S20 and the LAN port of an upstream device, such as a modem, using an Ethernet cable.</p> </li> <li> <p>On a web browser, enter <code>http://gl-s20-otbr/</code> in the address bar. (If your GL-S20 is connected to an upstream device, enter the upstream device's IP address. Ensure they are on the same network.)</p> </li> <li> <p>From the left sidebar, click Thread Mesh &gt; Thread Network.</p> </li> <li> <p>Click Manual Setup. </p> <p></p> </li> <li> <p>Click Generate &gt; Apply. </p> <p></p> </li> <li> <p>Wait for a while until the word \"Leader\" appears next to the name of your GL-S20.</p> <p></p> </li> </ol>"},{"location":"iot_dev_board/using_tdb_on_gl-s20/#commission-the-thread-development-boards-into-the-gl-s20s-thread-network","title":"Commission the Thread Development Boards into the GL-S20's Thread network","text":"<ol> <li> <p>From the left sidebar, click Thread Commissioning.</p> </li> <li> <p>Click Start. You should see the Thread LED on your GL-S20 blink in orange. </p> <p></p> </li> <li> <p>Under \"Joiners,\" click Add. </p> </li> <li> <p>Enter the following information:</p> </li> <li> <p>Joiner EUI-64: Enter *. This allows any Thread Development Boards to join the Thread network. (To add a specific board, enter the EUI-64 of the board.)</p> </li> <li> <p>Joiner Credential: Enter AAAAAA.</p> </li> <li> <p>Click Apply. </p> <p></p> </li> <li> <p>Press the SW2 on each Thread Development Board you added. The LED will blink in green. (The board is entering commissioning mode.)</p> </li> <li> <p>Wait for a few seconds until the green LED stops blinking. (When the LED becomes static, the board has been commissioned into the Thread network.)</p> </li> </ol>"},{"location":"iot_dev_board/using_tdb_on_gl-s20/#test-the-thread-development-boards-on-the-thread-network","title":"Test the Thread Development Boards on the Thread network","text":"<ol> <li> <p>Long press the SW1 on each Thread Development Board you added for about 3 seconds. Thread Development Boards will enter the demo mode.</p> </li> <li> <p>Use the rotary knob to control the RGB LED:</p> </li> <li>To turn on or off the RGB LED of other Thread Development Boards on the same thread network: Press down the rotary knob. </li> <li>To change the RGB LED colors of other Thread Development Boards on the same thread network: Rotate the rotary knob. </li> </ol>"},{"location":"mqtt_vpn/","title":"Index","text":"<p>Coming soon.</p>"},{"location":"thread_board_router/gl-s20/","title":"Introduction","text":"<p>GL-S20 is a compact and cost efficient Thread Border Router designed for fast and simple IoT deployment. It supports Thread 1.3 as well as 2.4 GHz Wi-Fi (150Mbps) and ethernet for building a Thread Network and connecting to the Internet. The GL-S20 is equipped with the high-performance ESP32 chipset and is fully compatible with FreeRTOS. It supports Wi-Fi to Ethernet Failover, ensuring optimal performance and reliability. Additionally, the GL-S20 features PoE functionality, making it a versatile solution for various IoT.</p>"},{"location":"thread_board_router/gl-s20/ble_network_configuration_api/","title":"GL-S20 BLE Network Configuration API","text":"<p>The GL-S20 includes two GATT services.</p> <p>The first one is to receive instructions and messages, and the UUID of the service is <code>000000FF-0000-1000-8000-00805F9B34FB</code>, and it contains a characteristic, the UUID of the characteristic is <code>0000FF01-0000-1000-8000-00805F9B34FB</code>. This characteristic permission is only writable.</p> <p>The second one is for sending notifications like reply the instruction operation, and the UUID of the service is <code>000000EE-0000-1000-8000-00805F9B34FB</code>. It only has one characteristic, and the UUID of the characteristic is <code>0000EE01-0000-1000-8000-00805F9B34FB</code>. The permission for this characteristic is readable and notifiable.</p>"},{"location":"thread_board_router/gl-s20/ble_network_configuration_api/#package-format","title":"Package format","text":"<p>Whether the device receives instructions from the client or responds to the execution results, it needs to follow the following format.</p> <p>It consists of seven parts: header, version number, package length, scrolling count, CRC checksum, command ID, and data segment.</p> Header Version Length Count CRC-16 CmdID Data 1 byte 1 byte 2 byte 1 byte 2 byte 1 byte N byte not encrypted encrypted by AES-128 <ul> <li>Header</li> </ul> <p>The header defaults to 0xFE.</p> <ul> <li>Version</li> </ul> <p>Version number defaults to 0x01.</p> <ul> <li>Length</li> </ul> <p>The length of the entire package.</p> <ul> <li>Count</li> </ul> <p>The valid range is 0-255, with a rolling count. The count is reset to zero on the initial connection, and the count value of the subsequent packet is larger than the previous one. (Package index to prevent package stuffing)</p> <p>Note: When the first packet is sent, the count field should be filled with 0x01. After that just rolling count.</p> <ul> <li>CRC-16</li> </ul> <p>After completing the packaging of header, version number, package length, scrolling count, command ID, data segments, CRC calculation can be performed.</p> <p>Note: Fill the CRC-16 field with 0x0000 before CRC-16 calculate. Then fill the calculated result back into the CRC-16 field.</p> <ul> <li>CmdID</li> </ul> <p>Identify which command the package is.</p> <ul> <li>Data</li> </ul> <p>Data segment. If not parameter exist, this field can be NULL.</p> <p>Note: The field of CmdID and Data should be encrypted by AES-128.</p>"},{"location":"thread_board_router/gl-s20/ble_network_configuration_api/#crc-16-verify","title":"CRC-16 verify","text":"<p>The detailed configuration is as follows:</p> CRC-16 cpnfiguration parameter Name \"XMODEM\", also known as \"ZMODEM\", \"CRC-16/ACORN\" Width 16 bit Poly 1021 (That is actually x^16 + x^12 + x^5 + 1) Initialization 0000 Reflect Input byte False Reflect Output CRC False Xor constant to output CRC 0000"},{"location":"thread_board_router/gl-s20/ble_network_configuration_api/#aes-128-encryption","title":"AES-128 encryption","text":"<p>AES128 symmetric encryption uses the CBC method, which first divides the plaintext into several small segments, and then performs XOR operations on each segment with the initial block or the previous ciphertext segment before encrypting it with the key.</p> AES-128 encryption parameter model CBC Width 128 bit IV \"0000000000000000\" Fill the way PKCS7Padding Key \"goodlife--00XXXX\"Note:BLE MAC in uppercase of devices without the ':' symbol calculate by CRC-16, and then the result transform to in uppercase HEX string is  [XXXX]."},{"location":"thread_board_router/gl-s20/ble_network_configuration_api/#ble-api","title":"BLE API","text":"<p>The data of the BLE API needs to be filled in the CmdID and Data segments of the package format. The BLE API input parameter and output parameter  adopts JSON format.</p> <ul> <li> <p>For command</p> </li> <li> <p>Input parameter does not exist</p> <p> CmdID Data description CmdID NULL example 0x01 NULL <li> <p>Input parameter exist</p> <p> CmdID Data description CmdID Input paramete \\n example 0x08 (Json format transform to hex) 0x0a <li> <p>For respond</p> </li> CmdID Data description CmdID \\n Output paramete example 0x01 0x0a (Json format transform to hex)"},{"location":"thread_board_router/gl-s20/ble_network_configuration_api/#cmdid-list","title":"CmdID list","text":"CmdID Cmd Name Require input parameter description 0x01 gl_check_initialized N Get the device initialization status 0x02 gl_set_init_admin_password Y Initialize web login password 0x03 gl_eth_get_status N Get the current status of Ethernet 0x04 gl_eth_get_config N Get Ethernet configuration 0x05 gl_eth_set_config Y Set Ethernet configuration 0x06 gl_wifi_get_status N Get the current status of WiFi 0x07 gl_wifi_stop N Close the WiFi 0x08 gl_wifi_start Y Start connect to specified WiFi 0x09 gl_wifi_get_save_wifi N Obtain a list of configured WiFi, with a maximum of 3 saved 0x0a gl_wifi_delete_save_wifi Y Delete WiFi configuration in saved wifi list 0x0b gl_wifi_scan N Scan the current WiFi environment, obtain a list of WiFi information 0x0c gl_wan_failover_get_config N Obtain the current WAN failover configuration 0x0d gl_wan_failover_set_config Y Set the current WAN failover configuration 0x0e gl_set_admin_pwd Y Change web login password 0x0f gl_sys_reset N Reset the device to factory 0x10 gl_sys_restart N Restart the device"},{"location":"thread_board_router/gl-s20/ble_network_configuration_api/#init","title":"INIT","text":""},{"location":"thread_board_router/gl-s20/ble_network_configuration_api/#gl_check_initialized","title":"gl_check_initialized","text":"<ul> <li> <p>CmdID: 0x01</p> </li> <li> <p>Function description: Get the device initialization status</p> </li> <li> <p>Input parameter</p> </li> </ul> <p>None</p> <ul> <li>Output parameter</li> </ul> field parameters required parameter type description firmware_category mandatory string Firmware type: \"2c\" firmware_version mandatory string Firmware version hostname mandatory string Device Host Name build_time mandatory string Firmware build time initialized mandatory boolean Whether initialized mac mandatory string device basic mac model mandatory string device model code mandatory number Error code\uff1a err_msg optional string Error message"},{"location":"thread_board_router/gl-s20/ble_network_configuration_api/#gl_set_init_admin_password","title":"gl_set_init_admin_password","text":"<ul> <li> <p>CmdID: 0x02</p> </li> <li> <p>Function description: Initialize web login password</p> </li> <li> <p>Input parameter</p> </li> </ul> field parameters required parameter type description password mandatory string password for web login, range [10,32] <ul> <li>Output parameter</li> </ul> field parameters required parameter type description code mandatory number Error code err_msg optional string Error message"},{"location":"thread_board_router/gl-s20/ble_network_configuration_api/#ethernet","title":"Ethernet","text":""},{"location":"thread_board_router/gl-s20/ble_network_configuration_api/#gl_eth_get_status","title":"gl_eth_get_status","text":"<ul> <li> <p>CmdID: 0x03</p> </li> <li> <p>Function description: Get the current status of Ethernet</p> </li> <li> <p>Input parameter</p> </li> </ul> <p>None</p> <ul> <li>Output parameter</li> </ul> field parameters required parameter type description status mandatory number Connection status0: Not connected 1: Successfully connected 2: Connecting 3: Physical device not connected protocol mandatory string Networking methods\u201cdhcp\u201d or \u201cstatic\u201d ipv4 optional object IPv4 related status, only available after connection ipv4.ip mandatory string ipv4 address ipv4.gateway mandatory string ipv4 gateway ipv6 optional object IPv6 related status, only available after connection ipv6.ip mandatory string ipv6 address code mandatory number Error code\uff1a err_msg optional string Error message"},{"location":"thread_board_router/gl-s20/ble_network_configuration_api/#gl_eth_get_config","title":"gl_eth_get_config","text":"<ul> <li> <p>CmdID: 0x04</p> </li> <li> <p>Function description: Obtain Ethernet configuration</p> </li> <li> <p>Input parameter</p> </li> </ul> <p>None</p> <ul> <li>Output parameter</li> </ul> field parameters required parameter type description protocol mandatory string Networking methods\u201cdhcp\u201d or \u201cstatic\u201d ipv4 optional object ipv4 setting, effective when static ipv4.ip mandatory string Static IPv4 address ipv4.netmask mandatory string Static ipv4 network mask ipv4.gateway mandatory string Static ipv4 gateway code mandatory number Error code\uff1a err_msg optional string Error message"},{"location":"thread_board_router/gl-s20/ble_network_configuration_api/#gl_eth_set_config","title":"gl_eth_set_config","text":"<ul> <li> <p>CmdID: 0x05</p> </li> <li> <p>Function description: Set Ethernet configuration</p> </li> <li> <p>Input parameter</p> </li> </ul> field parameters required parameter type description protocol mandatory string Networking methods\u201cdhcp\u201d or \u201cstatic\u201d ipv4 optional object ipv4 setting, effective when static ipv4.ip optional string Static IPv4 address ipv4.netmask optional string Static ipv4 network mask ipv4.gateway optional string Static ipv4 gateway <ul> <li>Output parameter</li> </ul> field parameters required parameter type description code mandatory number Error code err_msg optional string Error message"},{"location":"thread_board_router/gl-s20/ble_network_configuration_api/#wifi","title":"Wifi","text":""},{"location":"thread_board_router/gl-s20/ble_network_configuration_api/#gl_wifi_get_status","title":"gl_wifi_get_status","text":"<ul> <li> <p>CmdID: 0x06</p> </li> <li> <p>Function description: Get the current status of WiFi</p> </li> <li> <p>Input parameter</p> </li> </ul> <p>None</p> <ul> <li>Output parameter</li> </ul> field parameters required parameter type description status mandatory number Connection status0: Idle; 1: Connecting; 2: Connected, 3: Connection failed fail_msg optional string Connection failure information ssid optional string Connected or currently connected WiFi ssid bssid optional string Connected wifi bssid ipv4 optional object IPv4 related status, only available after connection ipv4.ip mandatory string ipv4 address ipv4.gateway mandatory string ipv4 gateway ipv6 optional object IPv6 related status, only available after connection ipv6.ip mandatory string ipv6 address code mandatory number Error code err_msg optional string Error message"},{"location":"thread_board_router/gl-s20/ble_network_configuration_api/#gl_wifi_stop","title":"gl_wifi_stop","text":"<ul> <li> <p>CmdID: 0x07</p> </li> <li> <p>Function description: Close the WiFi</p> </li> <li> <p>Input parameter</p> </li> </ul> <p>None</p> <ul> <li>Output parameter</li> </ul> field parameters required parameter type description code mandatory number Error code err_msg optional string Error message"},{"location":"thread_board_router/gl-s20/ble_network_configuration_api/#gl_wifi_start","title":"gl_wifi_start","text":"<ul> <li> <p>CmdID: 0x08</p> </li> <li> <p>Function description: Start connect to specified WiFi</p> </li> <li> <p>Input parameter</p> </li> </ul> field parameters required parameter type description enable_wifi_save mandatory boolean Whether save this configuration when connecting to WiFi protocol mandatory string Networking methods\u201cdhcp\u201d or \u201cstatic\u201d ipv4 optional object ipv4 setting, effective when static ipv4.ip optional string Static IPv4 address ipv4.netmask optional string Static ipv4 network mask ipv4.gateway optional string Static ipv4 gateway ssid mandatory string wifi ssid pwd mandatory string wifi password lock_bssid mandatory boolean Whether specify an AP to connect to the specified bssid bssid optional string wifi bssid auth_mode mandatory number wifi authentication mode0: open 1: WEP 2: WPA_PSK 3: WPA2_PSK  4: WPA_WPA2_PSK 5: WPA2_ENTERPRISE (Not support)6: WPA3_PSK 7: WPA2_WPA3_PSK 8: WAPI_PSK 9: OWE  <ul> <li>Output parameter</li> </ul> field parameters required parameter type description code mandatory number Error code err_msg optional string Error message"},{"location":"thread_board_router/gl-s20/ble_network_configuration_api/#gl_wifi_get_save_wifi","title":"gl_wifi_get_save_wifi","text":"<ul> <li> <p>CmdID: 0x09</p> </li> <li> <p>Function description: Obtain a list of configured WiFi, with a maximum of 3 saved</p> </li> <li> <p>Input parameter</p> </li> </ul> <p>None</p> <ul> <li>Output parameter</li> </ul> field parameters required parameter type description list mandatory array wifi list list[x].ssid optional string wifi ssid list[x].bssid optional string wifi bssid list[x].lock_bssid optional boolean whether lock the bssid list[x].auth_mode optional number wifi authentication mode list[x].pwd optional string wifi password list[x].protocol optional string Networking methods\u201cdhcp\u201d or \u201cstatic\u201d list[x].ipv4 optional object Static IPv4 configuration list[x].ipv4.ip optional string Static IPv4 address list[x].ipv4.netmask optional string Static  ipv4 network mask list[x].ipv4.gateway optional string Static   ipv4 gateway code mandatory number Error code\uff1a err_msg optional string Error message"},{"location":"thread_board_router/gl-s20/ble_network_configuration_api/#gl_wifi_delete_save_wifi","title":"gl_wifi_delete_save_wifi","text":"<ul> <li> <p>CmdID: 0x0a</p> </li> <li> <p>Function description: Delete WiFi configuration in saved wifi list</p> </li> <li> <p>Input parameter</p> </li> </ul> field parameters required parameter type description ssid mandatory string which wifi ssid need to delete auth_mode mandatory number need to delete wifi authentication mode0: open 1: WEP 2: WPA_PSK 3: WPA2_PSK  4: WPA_WPA2_PSK 5: WPA2_ENTERPRISE (Not support)6: WPA3_PSK 7: WPA2_WPA3_PSK 8: WAPI_PSK 9: OWE  <ul> <li>Output parameter</li> </ul> field parameters required parameter type description code mandatory number Error code err_msg optional string Error message"},{"location":"thread_board_router/gl-s20/ble_network_configuration_api/#gl_wifi_scan","title":"gl_wifi_scan","text":"<ul> <li> <p>CmdID: 0x0b</p> </li> <li> <p>Function description: Scan the current WiFi environment, obtain a list of WiFi information</p> </li> <li> <p>Input parameter</p> </li> </ul> <p>None</p> <ul> <li>Output parameter</li> </ul> field parameters required parameter type description list mandatory array wifi list list[x].ssid optional string wifi ssid list[x].bssid optional string wifi bssid list[x].auth_mode optional number wifi authentication mode0: open 1: WEP 2: WPA_PSK 3: WPA2_PSK  4: WPA_WPA2_PSK 5: WPA2_ENTERPRISE (Not support)6: WPA3_PSK 7: WPA2_WPA3_PSK 8: WAPI_PSK 9: OWE  list[x].rssi optional number signal intensity RSSI code mandatory number Error code\uff1a err_msg optional string Error message"},{"location":"thread_board_router/gl-s20/ble_network_configuration_api/#wan_failover","title":"Wan_failover","text":""},{"location":"thread_board_router/gl-s20/ble_network_configuration_api/#gl_wan_failover_get_config","title":"gl_wan_failover_get_config","text":"<ul> <li> <p>CmdID: 0x0c</p> </li> <li> <p>Function description: Obtain the current WAN failover configuration</p> </li> <li> <p>Input parameter</p> </li> </ul> <p>None</p> <ul> <li>Output parameter</li> </ul> field parameters required parameter type description eth mandatory object Ethernet failover configuration eth.enable mandatory boolean Whether enable Ethernet check eth.check_interval mandatory number eth check interval, unit is minutes eth.check_success_time mandatory number eth change to Available Condition: Accumulated Success Times of IP Ping Set eth.check_fail_time mandatory number eth change to fault condition: The cumulative number of ping failures for each set IP eth.check_ipv4 mandatory array eth IPv4 test address list, up to 3 eth.check_ipv4[x] mandatory string eth IPv4 test address eth.check_ipv6 mandatory array eth IPv6 test address list, up to 3 eth.check_ipv6[x] mandatory string eth IPv6 test address wifi mandatory object wifi Ethernet failover configuration wifi.enable mandatory boolean Whether enable wifi check wifi.check_interval mandatory number wifi check interval, unit is minutes wifi.check_success_time mandatory number wifi change to Available Condition: Accumulated Success Times of IP Ping Set wifi.check_fail_time mandatory number wifi change to fault condition: The cumulative number of ping failures for each set IP wifi.check_ipv4 mandatory array wifi IPv4 test address list, up to 3 wifi.check_ipv4[x] mandatory string wifi IPv4 test address wifi.check_ipv6 mandatory array wifi IPv6 test address list, up to 3 wifi.check_ipv6[x] mandatory string wifi IPv6 test address priority mandatory object Priority configuration priority.eth mandatory number eth priority, the smaller the number, the higher the priority priority.wifi mandatory number wifi priority, the smaller the number, the higher the priority code mandatory number Error code\uff1a err_msg optional string Error message"},{"location":"thread_board_router/gl-s20/ble_network_configuration_api/#gl_wan_failover_set_config","title":"gl_wan_failover_set_config","text":"<ul> <li> <p>CmdID: 0x0d</p> </li> <li> <p>Function description: Set the current WAN failover configuration</p> </li> <li> <p>Input parameter</p> </li> </ul> field parameters required parameter type description eth mandatory object Ethernet failover configuration eth.enable mandatory boolean Whether enable Ethernet check eth.check_ipv4 mandatory array eth IPv4 test address list, up to 3 eth.check_ipv4[x] mandatory string eth IPv4 test address eth.check_ipv6 mandatory array eth IPv6 test address list, up to 3 eth.check_ipv6[x] mandatory string eth IPv6 test address wifi mandatory object wifi Ethernet failover configuration wifi.enable mandatory boolean Whether enable wifi check wifi.check_ipv4 mandatory array wifi IPv4 test address list, up to 3 wifi.check_ipv4[x] mandatory string wifi IPv4 test address wifi.check_ipv6 mandatory array wifi IPv6 test address list, up to 3 wifi.check_ipv6[x] mandatory string wifi IPv6 test address <ul> <li>Output parameter</li> </ul> field parameters required parameter type description code mandatory number Error code err_msg optional string Error message"},{"location":"thread_board_router/gl-s20/ble_network_configuration_api/#system","title":"System","text":""},{"location":"thread_board_router/gl-s20/ble_network_configuration_api/#gl_set_admin_pwd","title":"gl_set_admin_pwd","text":"<ul> <li> <p>CmdID: 0x0e</p> </li> <li> <p>Function description: Change web login password</p> </li> <li> <p>Input parameter</p> </li> </ul> field parameters required parameter type description username mandatory string User name, must be 'root' old_pwd mandatory string Old password new_pwd mandatory string New password <ul> <li>Output parameter</li> </ul> field parameters required parameter type description code mandatory number Error code err_msg optional string Error message"},{"location":"thread_board_router/gl-s20/ble_network_configuration_api/#gl_sys_reset","title":"gl_sys_reset","text":"<ul> <li> <p>CmdID: 0x0f</p> </li> <li> <p>Function description: Reset the device to factory</p> </li> <li> <p>Input parameter</p> </li> </ul> <p>None</p> <ul> <li>Output parameter</li> </ul> field parameters required parameter type description code mandatory number Error code err_msg optional string Error message"},{"location":"thread_board_router/gl-s20/ble_network_configuration_api/#gl_sys_restart","title":"gl_sys_restart","text":"<ul> <li> <p>CmdID: 0x10</p> </li> <li> <p>Function description: Restart the device</p> </li> <li> <p>Input parameter</p> </li> </ul> <p>None</p> <ul> <li>Output parameter</li> </ul> field parameters required parameter type description code mandatory number Error code err_msg optional string Error message"},{"location":"thread_board_router/gl-s20/examples/","title":"Examples","text":"<p>Coming soon</p>"},{"location":"thread_board_router/gl-s20/hardware/","title":"Hardware","text":""},{"location":"thread_board_router/gl-s20/hardware/#specification","title":"Specification","text":"<p>GL-s20 specification</p>"},{"location":"thread_board_router/gl-s20/hardware/#gpio-list","title":"GPIO list","text":"ESP32-S3-WROOM-1 GPIO Labeling SIGNAL FUNCTION GPIO0 GPIO0 connected to ch340c pin DTR for the device to enter download mode GPIO1 BUTTON button input, used for reset GPIO2 GPIO2 used for control h2 reset io GPIO3 GPIO3 used for control h2 boot io GPIO4 PHY_SPI_INT interrupt GPIO number SPI Ethernet module GPIO5 PHY_RESET PHY reset GPIO number of SPI Ethernet module GPIO6 NETWORK_LED network led control (green) GPIO7 NETWORK_LED network led control (red) GPIO8 UART1 RX used for connect to h2 uart0 tx GPIO9 POWER_LED power led control (green) GPIO10 PHY_SPI_CSN SPI CS GPIO number for SPI Ethernet module GPIO11 PHY_SPI_MOSI SPI MOSI GPIO number for SPI Ethernet module GPIO12 PHY_SPI_CK SPI SCLK GPIO number for SPI Ethernet module GPIO13 PHY_SPI_MISO SPI MISO GPIO number for SPI Ethernet module GPIO14 POWER_LED power led control (red) GPIO15 NETWORK_LED network led control (yellow) GPIO16 BUTTON button input, used for iot function control GPIO17 IOT_LED iot led control (green) GPIO18 IOT_LED iot led control (red) GPIO19 IOT_LED iot led control (yellow) GPIO20 POWER_LED power led control (yellow) GPIO21 UART1 RTS used for connect to h2 uart0 cts GPIO35 GPIO35 NC GPIO36 GPIO36 NC GPIO37 GPIO37 NC GPIO38 GPIO38 NC GPIO39 GPIO39 NC GPIO40 PTA_REQUEST used for PTA GPIO41 PTA_PRIORITY used for PTA GPIO42 PTA_GRANT used for PTA GPIO43 UART0 TX used for debugging serial port output GPIO44 UART0 RX used for debugging serial port output GPIO45 PTA_TX_LINE used for PTA GPIO46 GPIO46 NC GPIO47 UART1 CTS used for connect to h2 uart0 rts GPIO48 UART1 TX used for connect to h2 uart0 rx"},{"location":"thread_board_router/gl-s20/hardware/#pcb-pinout","title":"PCB Pinout","text":""},{"location":"thread_board_router/gl-s20/http_restful_api/","title":"GL-S20 Http RESTful API","text":""},{"location":"thread_board_router/gl-s20/http_restful_api/#overview","title":"Overview","text":"URI Description /ui APIs for web UI /ui/challenge Get the randrom number of login encryption /ui/login Login and get the token /ui/logout Logout /ui/check_initialized Check if this devive is initialized /ui/set_init Initialize this device /otbr APIs for openthread broder router  /otbr/get_status Get current status /otbr/scan Start thread network scan /otbr/get_join_status Get the status of joiner, only use for S20 work as joiner /otbr/join Start joinning to the thread network /otbr/set_config Set the configurations of current thread network /otbr/stop Disable the thread /otbr/start Enable the thread /otbr/generate_thread_network Generate a new configuations of the thread network /otbr/set_txpower Set the TX power /otbr/set_commissioning Set the state of commissioner /otbr/add_joiner Add a new joiner /otbr/get_commissioning_status Get the status of commissioner /otbr/rejoin_all Rejoin all the joiners /otbr/get_joiner_list Get the list of joiners /otbr/remove_joiner_list Remove all the joiners in the list /otbr/export_joiner_list Export the list of joiners /otbr/import_joiner_list Import the list of joiners /otbr/commit_joiner_list Commit the list of joiners /otbr/get_bbr_status Get the status the backbone router /otbr/disable_bbr Disable the backbone router /otbr/enable_bbr Enable the backbone router /eth APIs for Ethernet /eth/get_status Get the current status of Ethernet /eth/get_config Get Ethernet configuration /eth/set_config Set Ethernet configuration /wifi APIs for Wifi /wifi/get_status Get the current status of WiFi /wifi/stop Disconnect wifi /wifi/start Connect to wifi /wifi/get_save_wifi Get a list of configured WiFi, with a maximum of 3 saved /wifi/delete_save_wifi Delete WiFi with saved configuration /wifi/scan Scan the current WiFi environment, and get the AP list /wifi/set_reconn_to_saved_wifi Set whether to enable automatic switching to saved WiFi (when the current WiFi cannot be connected) /wifi/get_reconn_to_saved_wifi Get whether to enable automatic switching to saved WiFi (when the current WiFi cannot be connected) /wan_failover APIs for wan failover /wan_failover/get_config Get the current WAN failover configuration /wan_failover/set_config Set the current WAN failover configuration /sys APIs for System /sys/get_info Get system special status information /sys/get_status Get system status information /sys/get_time_config Get time related configurations, including SNTP server and time zone settings /sys/set_time_config Set time related configurations, including SNTP server and time zone settings /sys/check_current_firmware Get current firmware information /sys/check_online_firmware Get the latest firmware information for online servers /sys/upgrade_online_firmware upgrade firmware form online servers /sys/check_upgrade_status Used to obtain upgrade status when upgrade loading /sys/upgrade_online_certificate Online upgrade certificate /sys/upgrade_local_certificate Upgrade certificate locally /sys/get_log Get system log /sys/export_sys_config Export current system configuration /sys/import_sys_config Import system configuration /sys/set_admin_pwd Change administrator password /sys/reset Restore factory settings /sys/restart Device restart"},{"location":"thread_board_router/gl-s20/http_restful_api/#ui","title":"/UI","text":""},{"location":"thread_board_router/gl-s20/http_restful_api/#login-and-use-steps","title":"Login and Use Steps","text":""},{"location":"thread_board_router/gl-s20/http_restful_api/#step-1-get-encryption-parameters-by-challenge-method","title":"Step 1: Get encryption parameters by challenge method","text":"<p>Call the /ui/challenge method to login. This method respond data for encryption, including: salt and nonce.</p> <pre><code>{\n    \"code\": 0,\n    \"result\": {\n        \"alg\": 66,\n        \"salt\": \"ZmVhMjk5\",\n        \"nonce\": \"N2E1NDAwNjIzZGMzY2QxYjQyY2VlZTEx\"\n    }\n}\n</code></pre> <p>Note: The string used for encrypted transmission, which is randomly generated and valid for only 2000ms. This means that steps 2-3 must be completed within 2000ms, otherwise the process has to restart from step 1.</p>"},{"location":"thread_board_router/gl-s20/http_restful_api/#step-2-generate-hash-values-for-login","title":"Step 2: Generate hash values for login","text":"<ul> <li>Get the hash string for password using hmac-sha256 with salt</li> <li>Combine the default user name, the hash string of password and the nonce. Format as : $(USERNAME):$(HASH):$(NONCE)</li> <li>The default user name is : root</li> <li>Get the MD5 hash string of the combine string</li> </ul> <p>Simply JavaScript code demo</p> <pre><code>import CryptoJS from 'crypto-js'\nconst hs256 = CryptoJS.HmacSHA256(password, salt) \n     const base64 = CryptoJS.enc.Base64.stringify(hs256) \n     const str = `root:${base64}:${nonce}`  \n     const md5 = CryptoJS.MD5(str).toString() c\n</code></pre>"},{"location":"thread_board_router/gl-s20/http_restful_api/#step-3-get-sid-by-login","title":"Step 3: Get sid by login","text":"<p>Call the /ui/login method, passing the username as the username parameter and the hash value as the hash parameter.</p> <p>/ui/login request body:</p> <pre><code>{\n  \"username\": \"root\",\n  \"hash\": \"771dff96fa01146f6e42ad01bed197ca\"\n}\n</code></pre> <p>/ui/login response body:</p> <pre><code>{\n  \"code\": 0,\n  \"result\": {\n    \"sid\": \"NDA2NWQ1YTYzN2NkZDFjNTU1MGE2ZDhi\"\n  }\n}\n</code></pre> <p>This method responds with the sid used for authentication and other apis should add it as \"Token\" in the http header. The validity of the sid is 35s and will be reset each time you call the interface with it. That is, if you don't call any interface for 35s, you need to get the sid again.</p>"},{"location":"thread_board_router/gl-s20/http_restful_api/#uichallenge","title":"/ui/challenge","text":"<p>Get the randrom number of login encryption.</p> <ul> <li> <p>Request Method: GET</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> <p>None</p> <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description alg number Id of the algorithm used for encryption, 66 means hmac-sha256 salt string Salt of the encryption nonce string Nonce of the encryption code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#uiset_init","title":"/ui/set_init","text":"<p>Initialize this device</p> <ul> <li> <p>Request Method: POST</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> Field Type Description lang string The language of web; support: \"zh-cn\" \"en\" password string The password of web <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#uilogin","title":"/ui/login","text":"<p>Login and get the token</p> <ul> <li> <p>Request Method: POST</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> Field Type Description username string Username for login\uff0c must be \"root\" hash string See the step2 hash values generate, and pass it in <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#uilogout","title":"/ui/logout","text":"<p>Logout</p> <ul> <li> <p>Request Method: POST</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> <p>None</p> <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#uicheck_initialized","title":"/ui/check_initialized","text":"<p>Check if this devive is initialized</p> <ul> <li> <p>Request Method: GET</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> <p>None</p> <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description firmware_category string The current firmware type used; Currently, there are two values: \"2c\" and \"2b\" firmware_version string Firmware Version hostname string Device Host Name initialized boolean Whether initialized mac string Device mac model string Device model code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#otbr","title":"/OTBR","text":""},{"location":"thread_board_router/gl-s20/http_restful_api/#otbrget_status","title":"/otbr/get_status","text":"<p>Get current status</p> <ul> <li> <p>Request Method: GET</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> <p>None</p> <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description OpenThreadVersionAPI string OpenThread API Version OTBRVersion string OpenThread Version (ot-br-posix Version) ThreadVersion string Thread Specification Version\uff0cv1.1\uff0cv1.2, v1.3 Network object Thread network information Network.Channel number Thread network channel, with a value range of 11-26 Network.ExtPanId string Thread network Extended PAN ID, Its length is limited to 16 bytes of UTF-8 encoded characters Network.NetworkKey string Thread network key, with a length of 32 bytes UTF-8 encoded characters Network.NetworkName string Thread network name, with a length limit of 1-16 characters Network.PanId string Thread network PAN ID, value range: 0x0&lt; PAN ID&lt;0xFFFF Network.PSKc string Thread network PSKc Network.Passphrase string Thread network Passphrase, User defined string, it can be used for Commissioner Credential and also used to generate PSKc, with a length limit of 6-255 bytes UTF-8 encoded characters Network.MeshLocalPrefix string Thread network MeshLocalPrefix Network.OnMeshPrefix string Thread network On-Mesh Prefix Network.IPv6 array IPv6 Address List Network.ActiveDataset string Hex formatted network information RCP object RCP information RCP.State number RCP current state: disabled=0detached=1child=2router=3leader=4 RCP.RCPVersion string RCP Version information, which refers to the OpenThread version information used by the firmware burned in the Thread module RCP.ExtAddress string IEEE 802.15.4 Extended Address RCP.EUI64 string The factory-assigned IEEE EUI-64 RCP.TXPower number The transmit power in dBm RCP.Rloc16 number Thread RLOC16 value code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#otbrscan","title":"/otbr/scan","text":"<p>Start thread network scan</p> <ul> <li> <p>Request Method: GET</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> <p>None</p> <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description ScanList array Scan List ScanList[x].Channel number The channel of this thread network ScanList[x].Rssi number The Thread network signal strength ScanList[x].Lqi number This Thread network link quality indicator ScanList[x].NetworkName string The network name of this Thread network ScanList[x].ExtPanId string This Thread network Extended PAN ID ScanList[x].PanId number This Thread network PAN ID code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#otbrget_join_status","title":"/otbr/get_join_status","text":"<p>Get the status of joiner, only use for S20 work as joiner</p> <ul> <li> <p>Request Method: POST</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> Field Type Description CredentialType string Joiner Credential Type:\"networkKeyType\"\"pskdType\"(Note: Only \"pskdType\" valid) <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description status number Joiner current status code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#otbrjoin","title":"/otbr/join","text":"<p>Start joinning to the thread network</p> <ul> <li> <p>Request Method: POST</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> Field Type Description CredentialType string Joiner Credential Type:\"networkKeyType\"\"pskdType\" NetworkKey string Thread network key, with a length of 32 bytes UTF-8 encoded characters PSKd string The Joiner Credential is a device-specific string of all uppercase alphanumeric characters (0-9 and A-Y, excluding I, O, Q and Z for readability), with a length between 6 and 32 characters. Channel number Thread network channel, obtained through scanning; When using networkKeyType, it is necessary use this field. PanId number Thread network PAN ID, obtained through scanning; When using networkKeyType, it is necessary use this field. <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#otbrset_config","title":"/otbr/set_config","text":"<p>Set the configurations of current thread network</p> <ul> <li> <p>Request Method: POST</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> Field Type Description NetworkName string Thread network name, with a length limit of 1-16 characters ExtPanId string Thread network Extended PAN ID PanId number Thread network PAN ID Passphrase string Thread network Passphrase, User defined string, it can be used for Commissioner Credential and also used to generate PSKc, with a length limit of 6-255 bytes UTF-8 encoded characters. Default use \"goodlife\". NetworkKey string Thread network key, with a length of 32 bytes UTF-8 encoded characters Channel number Thread network channel, with a value range of 11-26 <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#otbrstop","title":"/otbr/stop","text":"<p>Disable the thread</p> <ul> <li> <p>Request Method: POST</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> <p>None</p> <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#otbrstart","title":"/otbr/start","text":"<p>Enable the thread</p> <ul> <li> <p>Request Method: POST</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> <p>None</p> <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#otbrgenerate_thread_network","title":"/otbr/generate_thread_network","text":"<p>Generate a new configuations of the thread network</p> <ul> <li> <p>Request Method: GET</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> <p>None</p> <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#otbrset_txpower","title":"/otbr/set_txpower","text":"<p>Set the TX power</p> <ul> <li> <p>Request Method: POST</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> Field Type Description TXPower number The transmission power of thread network, range is -24 &lt;= TXPower &lt;= 20 <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#otbrset_commissioning","title":"/otbr/set_commissioning","text":"<p>Set the state of commissioner</p> <ul> <li> <p>Request Method: POST</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> Field Type Description Enable boolean Whether enable commissioner <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#otbradd_joiner","title":"/otbr/add_joiner","text":"<p>Add a new joiner</p> <ul> <li> <p>Request Method: POST</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> Field Type Description PSKd string The Joiner Credential is a device-specific string of all uppercase alphanumeric characters (0-9 and A-Y, excluding I, O, Q and Z for readability), with a length between 6 and 32 characters. Timeout number Timeout for Joiners, in seconds. Default 120s EUI64 string Joiner EUI64, default *, means all <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#otbrget_commissioning_status","title":"/otbr/get_commissioning_status","text":"<p>Get the status of commissioner</p> <ul> <li> <p>Request Method: GET</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> <p>None</p> <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description State number 1: active0: disabled code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#otbrrejoin_all","title":"/otbr/rejoin_all","text":"<p>Rejoin all the joiners</p> <ul> <li> <p>Request Method: POST</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> Field Type Description Type number 1: Only Timeout2: Only Joined3: ALL Timeout number Timeout for Joiners, in seconds. Default 120s <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#otbrget_joiner_list","title":"/otbr/get_joiner_list","text":"<p>Get the list of joiners</p> <ul> <li> <p>Request Method: GET</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> <p>None</p> <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description DeviceList array Joiner device list DeviceList[x].EUI64 string Joiner EUI64, \"*\" means all DeviceList[x].Status number Joiner device status:0:  Reday to Join1:  Joining2:  Joined3:  Timeout DeviceList[x].PSKd string The Joiner Credential DeviceList[x].Timeout number Joiner joining timeout DeviceList[x].AddTime number Timestamp when adding DeviceList[x].JoinedTime number Joiner successfully obtained credential timestamp code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#otbrremove_joiner_list","title":"/otbr/remove_joiner_list","text":"<p>Remove all the joiners in the list</p> <ul> <li> <p>Request Method: POST</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> Field Type Description DeviceList array Need to remove Joiner device list DeviceList[x] string Joiner EUI64 <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#otbrexport_joiner_list","title":"/otbr/export_joiner_list","text":"<p>Export the list of joiners</p> <ul> <li> <p>Request Method: GET</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> <p>None</p> <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description joiner_list_version string Joiner device list version DeviceList array Joiner device list DeviceList[x].EUI64 string Joiner EUI64, \"*\" means all DeviceList[x].PSKd string The Joiner Credential code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#otbrimport_joiner_list","title":"/otbr/import_joiner_list","text":"<p>Import the list of joiners</p> <ul> <li> <p>Request Method: POST</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> Field Type Description joiner_list_version string Joiner device list version DeviceList arrayarray Joiner device listNeed to remove Joiner device list DeviceList[x].EUI64 string Joiner EUI64, \"*\" means all DeviceList[x].PSKdDeviceList[x] stringstring The Joiner CredentialJoiner EUI64 <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#otbrcommit_joiner_list","title":"/otbr/commit_joiner_list","text":"<p>Commit the list of joiners</p> <ul> <li> <p>Request Method: POST</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> Field Type Description Timeout number commit timeout <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#otbrget_bbr_status","title":"/otbr/get_bbr_status","text":"<p>Get the status the backbone router</p> <ul> <li> <p>Request Method: GET</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> <p>None</p> <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description State number 1: active0: disabled code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#otbrdisable_bbr","title":"/otbr/disable_bbr","text":"<p>Disable the backbone router</p> <ul> <li> <p>Request Method: POST</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> <p>None</p> <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#otbrenable_bbr","title":"/otbr/enable_bbr","text":"<p>Enable the backbone router</p> <ul> <li> <p>Request Method: POST</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> <p>None</p> <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#eth","title":"/eth","text":""},{"location":"thread_board_router/gl-s20/http_restful_api/#ethget_status","title":"/eth/get_status","text":"<p>Get the current status of Ethernet</p> <ul> <li> <p>Request Method: GET</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> <p>None</p> <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description status number Connection status 0: Not connected1: Successfully connected 2: Connecting 3: Physical device not connected protocol string Networking methods\u201cdhcp\u201d or \u201cstatic\u201d ipv4 object IPv4 related status, only available after connection ipv4.ip string ipv4 address ipv4.gateway string ipv4 gateway ipv6 object IPv6 related status, only available after connection ipv6.ip string ipv6 address code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#ethget_config","title":"/eth/get_config","text":"<p>Get Ethernet configuration</p> <ul> <li> <p>Request Method: GET</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> <p>None</p> <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description protocol string Networking methods\u201cdhcp\u201d or \u201cstatic\u201d ipv4 object IPv4 related status, only available after connection ipv4.ip string Static IPv4 address ipv4.netmask string Static ipv4 network mask ipv4.gateway string Static ipv4 gateway code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#ethset_config","title":"/eth/set_config","text":"<p>Set Ethernet configuration</p> <ul> <li> <p>Request Method: POST</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> Field Type Description protocol string Networking methods\u201cdhcp\u201d or \u201cstatic\u201d ipv4 object ipv4 setting, effective when static ipv4.ip string Static IPv4 address ipv4.netmask string Static ipv4 network mask ipv4.gateway string Static ipv4 gateway <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#wifi","title":"/wifi","text":""},{"location":"thread_board_router/gl-s20/http_restful_api/#wifiget_status","title":"/wifi/get_status","text":"<p>Get the current status of WiFi</p> <ul> <li> <p>Request Method: GET</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> <p>None</p> <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description status number Connection status0: Idle; 1: Connecting; 2: Connected, 3: Connection failed fail_msg string Connection failure information ssid string Connected or currently connected WiFi ssid bssid string Connected wifi bssid ipv4 object IPv4 related status, only available after connection ipv4.ip string ipv4 address ipv4.gateway string ipv4 gateway ipv6 object IPv6 related status, only available after connection ipv6.ip string ipv6 address code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#wifistop","title":"/wifi/stop","text":"<p>Disconnect wifi</p> <ul> <li> <p>Request Method: POST</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> <p>None</p> <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#wifistart","title":"/wifi/start","text":"<p>Connect to wifi</p> <ul> <li> <p>Request Method: POST</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> Field Type Description enable_wifi_save boolean Whether save this configuration when connecting to WiFi protocol string Networking methods\u201cdhcp\u201d or \u201cstatic\u201d ipv4 object ipv4 setting, effective when static ipv4.ip string Static IPv4 address ipv4.netmask string Static ipv4 network mask ipv4.gateway string Static ipv4 gateway ssid string wifi ssid pwd string wifi password lock_bssid boolean Whether specify an AP to connect to the specified bssid bssid string wifi bssid auth_mode number wifi authentication mode0: open 1: WEP 2: WPA_PSK 3: WPA2_PSK  4: WPA_WPA2_PSK 5: WPA2_ENTERPRISE (Not support)6: WPA3_PSK 7: WPA2_WPA3_PSK 8: WAPI_PSK 9: OWE <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#wifiget_save_wifi","title":"/wifi/get_save_wifi","text":"<p>Get a list of configured WiFi, with a maximum of 3 saved</p> <ul> <li> <p>Request Method: GET</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> <p>None</p> <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description list array wifi list list[x].ssid string wifi ssid list[x].bssid string wifi bssid list[x].lock_bssid boolean whether lock the bssid list[x].auth_mode number wifi authentication mode0: open 1: WEP 2: WPA_PSK 3: WPA2_PSK  4: WPA_WPA2_PSK 5: WPA2_ENTERPRISE (Not support)6: WPA3_PSK 7: WPA2_WPA3_PSK 8: WAPI_PSK 9: OWE list[x].pwd string wifi password list[x].protocol string Networking methods\u201cdhcp\u201d or \u201cstatic\u201d list[x].ipv4 object Static IPv4 configuration list[x].ipv4.ip string Static IPv4 address list[x].ipv4.netmask string Static  ipv4 network mask list[x].ipv4.gateway string Static   ipv4 gateway code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#wifidelete_save_wifi","title":"/wifi/delete_save_wifi","text":"<p>Delete WiFi with saved configuration</p> <ul> <li> <p>Request Method: POST</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> Field Type Description ssid string which wifi ssid need to delete auth_mode number need to delete wifi authentication mode0: open 1: WEP 2: WPA_PSK 3: WPA2_PSK  4: WPA_WPA2_PSK 5: WPA2_ENTERPRISE (Not support)6: WPA3_PSK 7: WPA2_WPA3_PSK 8: WAPI_PSK 9: OWE <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#wifiscan","title":"/wifi/scan","text":"<p>Scan the current WiFi environment, and get the AP list</p> <ul> <li> <p>Request Method: GET</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> <p>None</p> <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description list array wifi list list[x].ssid string wifi ssid list[x].bssid string wifi bssid list[x].auth_mode number wifi authentication mode0: open 1: WEP 2: WPA_PSK 3: WPA2_PSK  4: WPA_WPA2_PSK 5: WPA2_ENTERPRISE (Not support)6: WPA3_PSK 7: WPA2_WPA3_PSK 8: WAPI_PSK 9: OWE list[x].rssi number signal intensity RSSI code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#wifiset_reconn_to_saved_wifi","title":"/wifi/set_reconn_to_saved_wifi","text":"<p>Set whether to enable automatic switching to saved WiFi (when the current WiFi cannot be connected)</p> <ul> <li> <p>Request Method: POST</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> Field Type Description enable boolean Whether enable <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#wifiget_reconn_to_saved_wifi","title":"/wifi/get_reconn_to_saved_wifi","text":"<p>Get whether to enable automatic switching to saved WiFi (when the current WiFi cannot be connected)</p> <ul> <li> <p>Request Method: GET</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> <p>None</p> <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description enable boolean Whether enable code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#wan_failover","title":"/wan_failover","text":""},{"location":"thread_board_router/gl-s20/http_restful_api/#wan_failoverget_config","title":"/wan_failover/get_config","text":"<p>Get the current WAN failover configuration</p> <ul> <li> <p>Request Method: GET</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> <p>None</p> <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description eth object Ethernet failover configuration eth.enable boolean Whether enable Ethernet check eth.check_interval number eth check interval, unit is minutes eth.check_success_time number eth change to Available Condition: Accumulated Success Times of IP Ping Set eth.check_fail_time number eth change to fault condition: The cumulative number of ping failures for each set IP eth.check_ipv4 array eth IPv4 test address list, up to 3 eth.check_ipv4[x] string eth IPv4 test address eth.check_ipv6 array eth IPv6 test address list, up to 3 eth.check_ipv6[x] string eth IPv6 test address wifi object wifi Ethernet failover configuration wifi.enable boolean Whether enable wifi check wifi.check_interval number wifi check interval, unit is minutes wifi.check_success_time number wifi change to Available Condition: Accumulated Success Times of IP Ping Set wifi.check_fail_time number wifi change to fault condition: The cumulative number of ping failures for each set IP wifi.check_ipv4 array wifi IPv4 test address list, up to 3 wifi.check_ipv4[x] string wifi IPv4 test address wifi.check_ipv6 array wifi IPv6 test address list, up to 3 wifi.check_ipv6[x] string wifi IPv6 test address priority object Priority configuration priority.eth number eth priority, the smaller the number, the higher the priority priority.wifi number wifi priority, the smaller the number, the higher the priority code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#wan_failoverset_config","title":"/wan_failover/set_config","text":"<p>Set the current WAN failover configuration</p> <ul> <li> <p>Request Method: POST</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> Field Type Description eth object Ethernet failover configuration eth.enable boolean Whether enable Ethernet check eth.check_ipv4 array eth IPv4 test address list, up to 3 eth.check_ipv4[x] string eth IPv4 test address eth.check_ipv6 array eth IPv6 test address list, up to 3 eth.check_ipv6[x] string eth IPv6 test address wifi object wifi Ethernet failover configuration wifi.enable boolean Whether enable wifi check wifi.check_ipv4 array wifi IPv4 test address list, up to 3 wifi.check_ipv4[x] string wifi IPv4 test address wifi.check_ipv6 array wifi IPv6 test address list, up to 3 wifi.check_ipv6[x] string wifi IPv6 test address <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#sys","title":"/sys","text":""},{"location":"thread_board_router/gl-s20/http_restful_api/#sysget_info","title":"/sys/get_info","text":"<p>Get system special status information</p> <ul> <li> <p>Request Method: GET</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> <p>None</p> <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description wan_status number 0: No network 1: There is got IP but no network (only with Failover enabled) 2: Network is avaliable thread_nwk_status number 0: No thread network 1: With thread network thread_commissioner_status number 0: Disable  commissioner1: Enable commissioner code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#sysget_status","title":"/sys/get_status","text":"<p>Get system status information</p> <ul> <li> <p>Request Method: GET</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> <p>None</p> <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description memory_total number The total memory of the system, in units of byte memory_free number Free memory of the system, in units of byte ble_mac string Ble mac wifi_mac string Wifi mac eth_mac string Eth mac model string Device model sn string Device sn code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#sysget_time_config","title":"/sys/get_time_config","text":"<p>Get time related configurations, including SNTP server and time zone settings</p> <ul> <li> <p>Request Method: GET</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> <p>None</p> <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description sntp string SNTP server address timezone number Timezone, range from -12 to 14 (from UTC-12 to UTC+14) localtime number Current time zone timestamp code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#sysset_time_config","title":"/sys/set_time_config","text":"<p>Set time related configurations, including SNTP server and time zone settings</p> <ul> <li> <p>Request Method: POST</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> Field Type Description sntp string SNTP server address timezone string Timezone\"UTC-12\"\"UTC-11\"\"UTC-10\"\"UTC-9\"\"UTC-8\"\"UTC-7\"\"UTC-6\"\"UTC-5\"\"UTC-4\"\"UTC-3\"\"UTC-2\"\"UTC-1\"\"UTC+0\"\"UTC+1\"\"UTC+2\"\"UTC+3\"\"UTC+4\"\"UTC+5\"\"UTC+6\"\"UTC+7\"\"UTC+8\"\"UTC+9\"\"UTC+10\"\"UTC+11\"\"UTC+12\"\"UTC+13\"\"UTC+14\" <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#syscheck_current_firmware","title":"/sys/check_current_firmware","text":"<p>Get current firmware information</p> <ul> <li> <p>Request Method: GET</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> <p>None</p> <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description current_firmware_type string Current firmware type current_firmware_version string Current firmware version code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#syscheck_online_firmware","title":"/sys/check_online_firmware","text":"<p>Get the latest firmware information for online servers</p> <ul> <li> <p>Request Method: GET</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> <p>None</p> <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description online_firmware_list array Firmware list on the server online_firmware_list[x].type string Firmware type online_firmware_list[x].version string Firmware version code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#sysupgrade_online_firmware","title":"/sys/upgrade_online_firmware","text":"<p>upgrade firmware form online servers</p> <ul> <li> <p>Request Method: POST</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> Field Type Description official object Official firmware. If want to valid this object, custom object do not be carry. official.type string Firmware type official.version string Firmware version official.save_config boolean Whether keep the configuration after upgrade custom object Custom firmware. If want to valid this object, official object do not be carry. custom.url string Firmware download url <ul> <li>Response parameters\uff1a</li> </ul> Field Description Type code 0 means success number err_msg Only exists on error string"},{"location":"thread_board_router/gl-s20/http_restful_api/#syscheck_upgrade_status","title":"/sys/check_upgrade_status","text":"<p>Used to obtain upgrade status when upgrade loading</p> <ul> <li> <p>Request Method: GET</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> <p>None</p> <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description status number 0: Upgrade successful, device is about to restart1: Upgrade failed, need to jump back to the higher-level page2: Upgrading in progress; code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#sysupgrade_online_certificate","title":"/sys/upgrade_online_certificate","text":"<p>Online upgrade certificate</p> <ul> <li> <p>Request Method: POST</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> Field Type Description url string Certificate download URL <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#sysupgrade_local_certificate","title":"/sys/upgrade_local_certificate","text":"<p>Upgrade ca certificate locally</p> <ul> <li> <p>Request Method: POST</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> <p>None</p> <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#sysget_log","title":"/sys/get_log","text":"<p>Get system log</p> <ul> <li> <p>Request Method: GET</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> <p>None</p> <ul> <li>Response parameters\uff1a</li> </ul> Field Description Type code 0 means success number err_msg Only exists on error string"},{"location":"thread_board_router/gl-s20/http_restful_api/#sysexport_sys_config","title":"/sys/export_sys_config","text":"<p>Export current system configuration</p> <ul> <li> <p>Request Method: POST</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> <p>None</p> <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description cfg_ver number System configuconration version ui_cfg object UI configuconration ui_cfg.language string The language of web; support: \"zh-cn\" \"en\" sntp_cfg object SNTP configuconration sntp_cfg.sntp_srv string SNTP server address sntp_cfg.time_zone string Timezone\"UTC-12\"\"UTC-11\"\"UTC-10\"\"UTC-9\"\"UTC-8\"\"UTC-7\"\"UTC-6\"\"UTC-5\"\"UTC-4\"\"UTC-3\"\"UTC-2\"\"UTC-1\"\"UTC+0\"\"UTC+1\"\"UTC+2\"\"UTC+3\"\"UTC+4\"\"UTC+5\"\"UTC+6\"\"UTC+7\"\"UTC+8\"\"UTC+9\"\"UTC+10\"\"UTC+11\"\"UTC+12\"\"UTC+13\"\"UTC+14\" otbr_cfg object OTBR configuconration otbr_cfg.nwk_on_off number Whether enable thread network otbr_cfg.txpower number The transmission power of thread network, range is -24 &lt;= TXPower &lt;= 20 otbr_cfg.passphrase string Thread network Passphrase, User defined string, it can be used for Commissioner Credential and also used to generate PSKc, with a length limit of 6-255 bytes UTF-8 encoded characters otbr_cfg.bbr_on_off number Whether enable thread bbr otbr_cfg.channel number Thread network channel, with a value range of 11-26 otbr_cfg.pan_id number Thread network PAN ID, value range: 0x0&lt; PAN ID&lt;0xFFFF otbr_cfg.nwk_key string Thread network key, with a length of 32 bytes UTF-8 encoded characters otbr_cfg.ext_pan_id string Thread network Extended PAN ID, Its length is limited to 16 bytes of UTF-8 encoded characters otbr_cfg.nwk_name string Thread network name, with a length limit of 1-16 characters wifi_cfg object WIFI configuconration wifi_cfg.wifi_on_off number Whether enable wifi connect wifi_cfg.ssid string wifi ssid wifi_cfg.password string wifi password wifi_cfg.lock_bssid boolean whether lock the bssid wifi_cfg.bssid string wifi bssid wifi_cfg.authmode number wifi authentication mode0: open 1: WEP 2: WPA_PSK 3: WPA2_PSK  4: WPA_WPA2_PSK 5: WPA2_ENTERPRISE (Not support)6: WPA3_PSK 7: WPA2_WPA3_PSK 8: WAPI_PSK 9: OWE eth_failover_cfg object ETH failover configuconration eth_failover_cfg.check boolean Whether enable ETH failover eth_failover_cfg.priority number eth priority, the smaller the number, the higher the priority eth_failover_cfg.check_interval number eth check interval, unit is minutes eth_failover_cfg.check_success_time number eth change to Available Condition: Accumulated Success Times of IP Ping Set eth_failover_cfg.check_fail_time number eth change to fault condition: The cumulative number of ping failures for each set IP eth_failover_cfg.check_ipv4 array eth IPv4 test address list, up to 3 eth_failover_cfg.check_ipv4[x] string eth IPv4 test address eth_failover_cfg.check_ipv6 array eth IPv6 test address list, up to 3 eth_failover_cfg.check_ipv6[x] string eth IPv6 test address wifi_failover_cfg object WIFI failover configuconration wifi_failover_cfg.check boolean Whether enable WIFI failover wifi_failover_cfg.priority number wifi priority, the smaller the number, the higher the priority wifi_failover_cfg.check_interval number wifi check interval, unit is minutes wifi_failover_cfg.check_success_time number wifi change to Available Condition: Accumulated Success Times of IP Ping Set wifi_failover_cfg.check_fail_time number wifi change to fault condition: The cumulative number of ping failures for each set IP wifi_failover_cfg.check_ipv4 array wifi IPv4 test address list, up to 3 wifi_failover_cfg.check_ipv4[x] string wifi IPv4 test address wifi_failover_cfg.check_ipv6 array wifi IPv6 test address list, up to 3 wifi_failover_cfg.check_ipv6[x] string wifi IPv6 test address eth_dhcp_cfg object ETH dhcp configuconration eth_dhcp_cfg.enable boolean Whether enable ETH dhcp eth_dhcp_cfg.static_ipv4 object ETH ipv4 setting, effective when static eth_dhcp_cfg.static_ipv4.ip string Static IPv4 address eth_dhcp_cfg.static_ipv4.netmask string Static ipv4 network mask eth_dhcp_cfg.static_ipv4.gateway string Static ipv4 gateway wifi_dhcp_cfg object WIFI  dhcp configuconration wifi_dhcp_cfg.enable boolean Whether enable WIFI dhcp wifi_dhcp_cfg.static_ipv4 object WIFI ipv4 setting, effective when dhcp disable wifi_dhcp_cfg.static_ipv4.ip string Static IPv4 address wifi_dhcp_cfg.static_ipv4.netmask string Static ipv4 network mask wifi_dhcp_cfg.static_ipv4.gateway string Static ipv4 gateway wifi_saved object WIFI saved configuconration wifi_saved.list array WIFI saved list wifi_saved.list[x].ssid string WIFI ssid wifi_saved.list[x].lock_bssid boolean Whether lock the bssid wifi_saved.list[x].bssid string WIFI bssid wifi_saved.list[x].auth_mode number wifi authentication mode0: open 1: WEP 2: WPA_PSK 3: WPA2_PSK  4: WPA_WPA2_PSK 5: WPA2_ENTERPRISE (Not support)6: WPA3_PSK 7: WPA2_WPA3_PSK 8: WAPI_PSK 9: OWE wifi_saved.list[x].pwd string WIFI password wifi_saved.list[x].dhcp boolean Whether enable WIFI dhcp wifi_saved.list[x].ipv4 object WIFI ipv4 setting, effective when dhcp disable wifi_saved.list[x].ipv4.ip string Static IPv4 address wifi_saved.list[x].ipv4.netmask string Static ipv4 network mask wifi_saved.list[x].ipv4.gateway string Static ipv4 gateway code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#sysimport_sys_config","title":"/sys/import_sys_config","text":"<p>Import system configuration</p> <ul> <li> <p>Request Method: POST</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> Field Type Description cfg_ver number System configuconration version ui_cfg object UI configuconration ui_cfg.language string The language of web; support: \"zh-cn\" \"en\" sntp_cfg object SNTP configuconration sntp_cfg.sntp_srv string SNTP server address sntp_cfg.time_zone string Timezone\"UTC-12\"\"UTC-11\"\"UTC-10\"\"UTC-9\"\"UTC-8\"\"UTC-7\"\"UTC-6\"\"UTC-5\"\"UTC-4\"\"UTC-3\"\"UTC-2\"\"UTC-1\"\"UTC+0\"\"UTC+1\"\"UTC+2\"\"UTC+3\"\"UTC+4\"\"UTC+5\"\"UTC+6\"\"UTC+7\"\"UTC+8\"\"UTC+9\"\"UTC+10\"\"UTC+11\"\"UTC+12\"\"UTC+13\"\"UTC+14\" otbr_cfg object OTBR configuconration otbr_cfg.nwk_on_off number Whether enable thread network otbr_cfg.txpower number The transmission power of thread network, range is -24 &lt;= TXPower &lt;= 20 otbr_cfg.passphrase string Thread network Passphrase, User defined string, it can be used for Commissioner Credential and also used to generate PSKc, with a length limit of 6-255 bytes UTF-8 encoded characters otbr_cfg.bbr_on_off number Whether enable thread bbr otbr_cfg.channel number Thread network channel, with a value range of 11-26 otbr_cfg.pan_id number Thread network PAN ID, value range: 0x0&lt; PAN ID&lt;0xFFFF otbr_cfg.nwk_key string Thread network key, with a length of 32 bytes UTF-8 encoded characters otbr_cfg.ext_pan_id string Thread network Extended PAN ID, Its length is limited to 16 bytes of UTF-8 encoded characters otbr_cfg.nwk_name string Thread network name, with a length limit of 1-16 characters wifi_cfg object WIFI configuconration wifi_cfg.wifi_on_off number Whether enable wifi connect wifi_cfg.ssid string wifi ssid wifi_cfg.password string wifi password wifi_cfg.lock_bssid boolean whether lock the bssid wifi_cfg.bssid string wifi bssid wifi_cfg.authmode number wifi authentication mode0: open 1: WEP 2: WPA_PSK 3: WPA2_PSK  4: WPA_WPA2_PSK 5: WPA2_ENTERPRISE (Not support)6: WPA3_PSK 7: WPA2_WPA3_PSK 8: WAPI_PSK 9: OWE eth_failover_cfg object ETH failover configuconration eth_failover_cfg.check boolean Whether enable ETH failover eth_failover_cfg.priority number eth priority, the smaller the number, the higher the priority eth_failover_cfg.check_interval number eth check interval, unit is minutes eth_failover_cfg.check_success_time number eth change to Available Condition: Accumulated Success Times of IP Ping Set eth_failover_cfg.check_fail_time number eth change to fault condition: The cumulative number of ping failures for each set IP eth_failover_cfg.check_ipv4 array eth IPv4 test address list, up to 3 eth_failover_cfg.check_ipv4[x] string eth IPv4 test address eth_failover_cfg.check_ipv6 array eth IPv6 test address list, up to 3 eth_failover_cfg.check_ipv6[x] string eth IPv6 test address wifi_failover_cfg object WIFI failover configuconration wifi_failover_cfg.check boolean Whether enable WIFI failover wifi_failover_cfg.priority number wifi priority, the smaller the number, the higher the priority wifi_failover_cfg.check_interval number wifi check interval, unit is minutes wifi_failover_cfg.check_success_time number wifi change to Available Condition: Accumulated Success Times of IP Ping Set wifi_failover_cfg.check_fail_time number wifi change to fault condition: The cumulative number of ping failures for each set IP wifi_failover_cfg.check_ipv4 array wifi IPv4 test address list, up to 3 wifi_failover_cfg.check_ipv4[x] string wifi IPv4 test address wifi_failover_cfg.check_ipv6 array wifi IPv6 test address list, up to 3 wifi_failover_cfg.check_ipv6[x] string wifi IPv6 test address eth_dhcp_cfg object ETH dhcp configuconration eth_dhcp_cfg.enable boolean Whether enable ETH dhcp eth_dhcp_cfg.static_ipv4 object ETH ipv4 setting, effective when static eth_dhcp_cfg.static_ipv4.ip string Static IPv4 address eth_dhcp_cfg.static_ipv4.netmask string Static ipv4 network mask eth_dhcp_cfg.static_ipv4.gateway string Static ipv4 gateway wifi_dhcp_cfg object WIFI  dhcp configuconration wifi_dhcp_cfg.enable boolean Whether enable WIFI dhcp wifi_dhcp_cfg.static_ipv4 object WIFI ipv4 setting, effective when dhcp disable wifi_dhcp_cfg.static_ipv4.ip string Static IPv4 address wifi_dhcp_cfg.static_ipv4.netmask string Static ipv4 network mask wifi_dhcp_cfg.static_ipv4.gateway string Static ipv4 gateway wifi_saved object WIFI saved configuconration wifi_saved.list array WIFI saved list wifi_saved.list[x].ssid string WIFI ssid wifi_saved.list[x].lock_bssid boolean Whether lock the bssid wifi_saved.list[x].bssid string WIFI bssid wifi_saved.list[x].auth_mode number wifi authentication mode0: open 1: WEP 2: WPA_PSK 3: WPA2_PSK  4: WPA_WPA2_PSK 5: WPA2_ENTERPRISE (Not support)6: WPA3_PSK 7: WPA2_WPA3_PSK 8: WAPI_PSK 9: OWE wifi_saved.list[x].pwd string WIFI password wifi_saved.list[x].dhcp boolean Whether enable WIFI dhcp wifi_saved.list[x].ipv4 object WIFI ipv4 setting, effective when dhcp disable wifi_saved.list[x].ipv4.ip string Static IPv4 address wifi_saved.list[x].ipv4.netmask string Static ipv4 network mask wifi_saved.list[x].ipv4.gateway string Static ipv4 gateway code number 0 means success err_msg string Only exists on error <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#sysset_admin_pwd","title":"/sys/set_admin_pwd","text":"<p>Change administrator password</p> <ul> <li> <p>Request Method: POST</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> Field Type Description username string User name, must be 'root' old_pwd string Old password new_pwd string New password <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#sysreset","title":"/sys/reset","text":"<p>Restore factory settings</p> <ul> <li> <p>Request Method: POST</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> <p>None</p> <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/http_restful_api/#sysrestart","title":"/sys/restart","text":"<p>Device restart</p> <ul> <li> <p>Request Method: POST</p> </li> <li> <p>Request parameters\uff1a</p> </li> </ul> <p>None</p> <ul> <li>Response parameters\uff1a</li> </ul> Field Type Description code number 0 means success err_msg string Only exists on error"},{"location":"thread_board_router/gl-s20/tools/","title":"Tools","text":"<p>Coming soon</p>"},{"location":"thread_board_router/gl-s20/user_manual/","title":"GL-S20 User Manual","text":""},{"location":"thread_board_router/gl-s20/user_manual/#general-product-introduction","title":"General Product Introduction","text":""},{"location":"thread_board_router/gl-s20/user_manual/#product-introduction","title":"Product introduction","text":"<p>GL-S20 is a cost-effective IoT gateway designed to provide an essential &amp; streamlined connectivity solution for IoT devices. It boasts high energy efficiency, high-availability, and reliable IoT connectivity in a compact design.</p> <p>As the next-gen IoT gateway of the GL-S10, GL-S20 can provides Ethernet and Wi-Fi connectivity for BLE devices .It can also be utilized as a Thread Border Router/Thread Router.</p> <p>GL-S20 supports customization in hardware and software, which can significantly expedite the development of your IoT system.</p>"},{"location":"thread_board_router/gl-s20/user_manual/#product-feature","title":"Product feature","text":"<p>FreeRTOS, Thread 1.3 / BLE 5.3, PoE Powered, Wi-Fi / ETH failover</p>"},{"location":"thread_board_router/gl-s20/user_manual/#technical-specification","title":"Technical specification","text":"Spec Main MCU Module ESP32-S3-WROOM-1 CPU Dual-core Xtensa\u00ae LX7 @ 240MHz SRAM 512KB PSRAM 8MB Flash 16MB ETH 10 Base-T / 100 Base-TX Wi-Fi 802.11b/g/n (2.4GHz), 1x1 Thread/BLE Module ESP32-H2-MINI-1 LED Indicators Power, IoT, Network Buttons Reset, IoT Power Input DC 5V1A (USB-C), IEEE 802.3 af (PoE) Power Consumption &lt;3w (DC), &lt;7w (PoE) Firmware burning USB-UART via USB-C Dimension 76 x 76 x 25 mm Net Weight (Without package) 63g"},{"location":"thread_board_router/gl-s20/user_manual/#package-list","title":"Package list","text":"Object Quantity User Manual &amp; Warranty Card 1 GL-S20 Thread Border Router 1 Wall bracket 1 Wall bracket screw package 1 Ethernet cable 1 Power adapters (US, EU, UK &amp; AU plugs) 1"},{"location":"thread_board_router/gl-s20/user_manual/#function-of-buttons","title":"Function of buttons","text":"<p>GL-S20 has two buttons, IoT and Reset.</p> <p></p>"},{"location":"thread_board_router/gl-s20/user_manual/#iot-button","title":"IoT Button","text":"<p>The IoT button allows you to perform these actions:</p> Function Instruction Join Thread network When the device is not connected to a Thread network, press and hold the IoT button for 2 seconds. Release the button when the IoT LED starts flashing green slowly. Create Thread network When the device is not connected to a Thread network, press and hold the IoT button for 8 seconds. Release the button when the IoT LED starts flashing green slowly. Start Commissioning When your device is connected to a Thread Network, press and hold the IoT button for 2 seconds. Release it when the IoT LED starts flashing yellow slowly. Disable Thread network When your device is connected to a Thread Network, press and hold the IoT button for 8 seconds. Release it when the IoT LED starts flashing yellow slowly."},{"location":"thread_board_router/gl-s20/user_manual/#reset-button","title":"Reset Button","text":"Reset button function Instruction Reset Thread/Wi-Fi/Ethernet configuration Press and hold the Reset button for 2 seconds. Release it when all 3 LEDs start flashing slowly. Restore factory settings Press and hold the Reset button for 8 seconds. Release it when all 3 LEDs start flashing rapidly."},{"location":"thread_board_router/gl-s20/user_manual/#led-description","title":"LED description","text":"Device Status Power LED IoT LED Network LED System starting Green flashing - - Device not initialized Solid Yellow - - Firmware upgrading Fast Green flashing Fast Green flashing Fast Green flashing Restoring factory settings Fast Yellow flashing Fast Yellow flashing Fast Yellow flashing Repairing firmware Red flashing - - Device abnormality Solid Red Solid Red Solid Red Network Status Network LED Network connected Solid Green Network disconnected Solid Red Network is connected but connectivity check failed Solid Yellow Thread Network Status IoT LED Thread Uninitialized OFF Thread working normally Solid Green Joining Thread network (Thread Router) Flashing Green Thread network disconnected (Thread Router) Flashing Red Thread Commissioning enabled Flashing Yellow"},{"location":"thread_board_router/gl-s20/user_manual/#access-web-admin-panel","title":"Access Web Admin Panel","text":"<p>Once you have finished setting up the Ethernet or Wi-Fi, you can access the GL-S20 Web Admin Panel by opening your web browser and navigating to either \"http://gl-s20-otbr/\" or the IP address assigned by the upper-layer device, as long as you are on the same network.</p>"},{"location":"thread_board_router/gl-s20/user_manual/#internet","title":"INTERNET","text":""},{"location":"thread_board_router/gl-s20/user_manual/#internet_1","title":"Internet","text":"<p>Read the below instruction to learn how to connect the GL-S20 to the Internet. </p> <p>You can configure  and manage GL-S20's networking settings by clicking INTERNET on the left side of the Web Admin Panel.</p> <p>It supports 2 ways to connect to the Internet as listed below:</p>"},{"location":"thread_board_router/gl-s20/user_manual/#method-1-connect-to-the-internet-via-an-ethernet-cable","title":"Method 1: Connect to the Internet via an Ethernet cable","text":""},{"location":"thread_board_router/gl-s20/user_manual/#ethernet","title":"Ethernet","text":"<p>To establish an Ethernet connection, use an Ethernet cable to connect the WAN port of the GL-S20 to the LAN port of an up stream  device.</p> <p>On the left side of the Web Admin Panel  \u2192  INTERNET \u2192 Internet \u2192 Ethernet card.</p> <p></p>"},{"location":"thread_board_router/gl-s20/user_manual/#protocol","title":"Protocol","text":"<p>There are 2 types of protocols: DHCP (Dynamic Host Configuration Protocol) and Static IP. Click Modify to change the settings.</p> <ul> <li>DHCP: DHCP is the default and most common protocol. It is a network management protocol used on Internet Protocol (IP) networks for automatically assigning IP addresses and other communication parameters to devices connected to the network using a client-server architecture.</li> <li>Static: Static is required if your need a fixed IP address to connect or you want to configure the network information such as IP address, Gateway, Netmask manually.</li> </ul>"},{"location":"thread_board_router/gl-s20/user_manual/#method-2-connect-to-the-internet-via-an-existing-wi-fi","title":"Method 2: Connect to the Internet via an existing Wi-Fi","text":"<p>Using Wi-Fi means connecting the device to another existing wireless network.</p> <p>You can change Wi-Fi settings on the left side of Web Admin Panel \u2192  INTERNET \u2192 Internet\u2192 Wi-Fi card.</p>"},{"location":"thread_board_router/gl-s20/user_manual/#basic-steps","title":"Basic steps","text":"<ol> <li> <p>Click Connect.</p> <p></p> </li> <li> <p>Select a Network you want to connect from the pop-up window. (If the desired network is not listed, click Join Other Network at the top.)</p> <p></p> </li> <li> <p>Enter the network passwords.</p> <p></p> </li> <li> <p>Click the Apply button.</p> </li> <li> <p>Wait for a moment, if you have successfully connected to the network, you will see the screen below:</p> <p></p> </li> </ol>"},{"location":"thread_board_router/gl-s20/user_manual/#wi-fi-advanced-settings","title":"Wi-Fi Advanced Settings","text":"<p>On the Wi-Fi Join Card, there are 2 additional settings you can use.</p> <p></p> <ul> <li>Lock BSSID: If this option is enabled, the device will only connect to the Access Point (AP) corresponding to the BSSID you selected when switching to a network using this SSID.</li> <li>Manually set static IP: If this option is enabled, you can configure the network information such as IP address, Gateway, Netmask manually.</li> </ul>"},{"location":"thread_board_router/gl-s20/user_manual/#manage-known-networks","title":"Manage Known Networks","text":"<p>To manage known networks, click Switch Network.</p> <p></p> <p>Or click Connect.</p> <p></p> <p>On the Known Network section</p> <p>-     To delete a known network: Click the trash icon.</p> <p>-     To configure the network: Click the settings icon. </p> <p></p>"},{"location":"thread_board_router/gl-s20/user_manual/#join-other-network","title":"Join Other Network","text":"<p>If the SSID is not in the Available Networks list, or the network you want to connect is hidden, you can click Join Other Network.</p> <p></p> <ul> <li>SSID: Enter the network's SSID.</li> <li>Security: Select one of these options.</li> <li>None: Select it if the network doesn't require a password.</li> <li>WPA/WPA2/WPA3: Select it if the network requires a password. Enter the password below.</li> </ul> <p></p> <p>Finally, Click Apply.</p>"},{"location":"thread_board_router/gl-s20/user_manual/#reconnection","title":"Reconnection","text":"<p>In the following cases, the device will try to connect to Wi-Fi every once in a while. You can turn off the reconnection manually, and for SSID/password errors, please delete it in Known Network. </p> <p></p> <ol> <li>The wrong SSID/password was entered during the process of Wi-Fi, after the first failed connection.</li> <li>After connecting to the Wi-Fi of the Primary router, the device moves out of the signal range of the Primary router.</li> <li>After connecting to the Wi-Fi of the Primary router, the upstream router changed the SSID/password, or restricted the connection.</li> </ol>"},{"location":"thread_board_router/gl-s20/user_manual/#failover","title":"Failover","text":"<p>On the left side of the, Web Admin Panel \u2192 INTERNET \u2192 Failover</p> <p></p> <p>The GL-S20 can be connected to the Internet in multiple ways, such as  Ethernet and Wi-Fi.</p> <p>When one type of Internet access is not available, it can automatically switch to another type of Internet access in specified time. (Ethernet is the highest priority )</p> <p>The GL-S20 will use ping to track the connection to destination IP to a determine if the interface is available.</p>"},{"location":"thread_board_router/gl-s20/user_manual/#the-setting-of-interface-status-tracking-method","title":"The setting of Interface Status Tracking Method","text":"<ul> <li>Enable Interface Status Track: You can disable the interface status tracking, and the router will use the physical status of the interface (such as whether the network cable is plugged in or not).</li> <li>Track Interval: Check every five minutes.</li> <li>Change to Failure Condition: The fault is detected after five consecutive failures.</li> <li>Change to Available Condition: It is judged to be a successful state after two unsuccessful attempts.</li> <li>IPV4 Track IP: Configure the IPV4 address you want to detect.</li> <li>IPV6 Track IP: Configure the IPV6 address you want to detect</li> </ul>"},{"location":"thread_board_router/gl-s20/user_manual/#thread-mesh","title":"Thread Mesh","text":""},{"location":"thread_board_router/gl-s20/user_manual/#thread-network","title":"Thread Network","text":"<p>On the left side of the Web Admin Panel \u2192 THREAD MESH \u2192 Thread Network</p> <p>You can configure and manage Thread Network settings in Thread Network page.</p> <p></p>"},{"location":"thread_board_router/gl-s20/user_manual/#parameter-meaning","title":"Parameter meaning","text":"<ul> <li>EUI-64: Unique device identifier, hexadecimal number of 8 bytes in length.</li> <li>Ext Mac: The device extension address, a unique identifier in the Thread network, is a hexadecimal number of 8 bytes in length. The extended address is randomly generated and will be re-randomized when the system is restored to factory settings.</li> <li>Thread Version: Current thread protocol version.</li> <li>Tx Power: Transmit power, -24~20 dBm, default is 6 dBm.</li> <li>Network Name: Thread network name, 1 to 16 characters long, used to generate PSKc (Pre-Shared Key for the Commissioner), default format  - &lt;3 characters after MAC address&gt;. <li>PAN ID: IEEE 802.15.4 MAC layer unique identifier, default value is 2 bytes after the MAC address in hexadecimal format.</li> <li>Extended PAN ID: Thread network extension PAN ID for PSKc generation.</li> <li>Network Key: Thread network key, a hexadecimal number of 16 bytes in length.</li> <li>Channel: Thread network channel, 11~26, default value is 26.</li> <p>Network Name is generated based on the MAC address of the device, PAN ID/ Extended PAN ID/ Network Key is generated randomly.</p>"},{"location":"thread_board_router/gl-s20/user_manual/#create-a-new-thread-network","title":"Create a new Thread network","text":"<p>You can create a new network directly by using the default configuration and clicking Enable. After a new network is created, the status of the GL-S20 will be changed from Detached to Leader.</p> <p></p> <p>Note: If your Thread network has the same configuration as other Thread networks,  the GL-S20 will automatically join that network.</p>"},{"location":"thread_board_router/gl-s20/user_manual/#manual-setup","title":"Manual Setup","text":"<p>If you want to set some parameters manually, you can configure them by clicking on the Manual Setup.You can modify the contents in the popup window.</p> <p></p>"},{"location":"thread_board_router/gl-s20/user_manual/#how-to-join-a-thread-network","title":"How to join a Thread Network","text":"<p>There are two methods for connecting the GL-S20 to an existing network.</p>"},{"location":"thread_board_router/gl-s20/user_manual/#method-1-join-the-network-by-using-network-key","title":"Method 1:  Join the network by using Network Key","text":"<p>Click Join Network. The GL-S20 will start scanning the available Thread networks nearby.</p> <p></p> <p>In the pop-up window, select the Thread network you want to join. Enter its Network Key and click Apply.</p> <p></p>"},{"location":"thread_board_router/gl-s20/user_manual/#method-2-join-the-network-by-using-the-commissioner","title":"Method 2:  Join the network by using the Commissioner","text":"<ol> <li>Use another GL-S20 as the Commissioner (please refer to the Thread Commissioning page guide), enter the Joiner EUI64 and Joiner Credential of the GL-S20 to be connected to the network.</li> <li>Click on the \"Join Network\" on the GL-S20 to be connected to the network, select \"Join With Commissioner\" in the pop-up window, enter the Joiner Credential and apply it.</li> </ol>"},{"location":"thread_board_router/gl-s20/user_manual/#thread-commissioning","title":"Thread Commissioning","text":"<p>On this screen, you can add new devices to the network. GL-S20 supports adding a large number of devices.</p> <p></p> <ul> <li> <p>The Joiners card: The list shows Joiners that are ready to be added to the network.</p> </li> <li> <p>The Commission Records card: Shows entry history of joiners' network.</p> </li> <li> <p>For Joined/Timeout devices, click the three-dot icon \u2192 Rejoin. The selected device will be added back to the Joiners list, waiting for next Commissioning.</p> <p></p> </li> <li> <p>For all the devices with the Join Fail status, you can click Rejoin All to move then back to Joiners list altogether.</p> <p></p> </li> </ul>"},{"location":"thread_board_router/gl-s20/user_manual/#add-a-single-device","title":"Add a single device","text":"<p>Click the Add button and a pop-up window will appear to add.</p> <p></p> <ul> <li>Joiner EUI-64: Joiner's EUI-64 or type *  to match all Joiners.</li> <li>Joiner Credential: The device credentials to be added must be a string containing all uppercase letters and numbers and must not contain the letters I, O, Q and Z, between 6 and 32 characters in length.</li> <li>Joiner Timeout: Joiner access timeout, during which a Joiner can access the network using valid credentials.</li> </ul>"},{"location":"thread_board_router/gl-s20/user_manual/#add-devices-in-batches","title":"Add devices in batches","text":"<p>If your device's service provider has set different Joiner credentials for each Thread device, you will need this feature when deploying. Clicking Export to download the template or export the saved Joiner list, fill in or add the Joiner EUI64 and Joiner Credential, then click Add \u2192 Batch Add to import.</p> <p>Please note that the number of joiners added cannot exceed 50</p> <p></p>"},{"location":"thread_board_router/gl-s20/user_manual/#advanced-thread-network-settings","title":"Advanced Thread network settings","text":"<p>You can use different advanced configurations related to Thread networking.</p>"},{"location":"thread_board_router/gl-s20/user_manual/#backbone-routers","title":"Backbone Routers","text":"<p>The Backbone Router (BBR) function is primarily used to receive multicast inbound/outbound requests. Refer to  (Thread Boder Router-THread 1.2 Multicast) for experimentation.</p> <p></p>"},{"location":"thread_board_router/gl-s20/user_manual/#system","title":"System","text":""},{"location":"thread_board_router/gl-s20/user_manual/#overview","title":"Overview","text":"<p>On the left side of the Web Admin Panel \u2192 SYSTEM \u2192 Overview</p> <p>This page shows you the system memory usage, device Bluetooth MAC, Wi-Fi MAC, WAN MAC, Model and Serial Number.</p> <p></p>"},{"location":"thread_board_router/gl-s20/user_manual/#time-zone","title":"Time Zone","text":"<p>On the left side of Web Admin Panel \u2192 SYSTEM \u2192 Time Zone</p>"},{"location":"thread_board_router/gl-s20/user_manual/#ntp-server","title":"NTP Server","text":"<p>In NTP Server card, you can customise the NTP server configuration.</p> <ul> <li>The device has two built-in NTP servers. If the user-defined server is not accessible, the built-in NTP server will be used automatically.</li> </ul>"},{"location":"thread_board_router/gl-s20/user_manual/#device-time","title":"Device Time","text":"<p>In this card, you can change the timezone of the device.</p> <p></p>"},{"location":"thread_board_router/gl-s20/user_manual/#upgrade","title":"Upgrade","text":"<p>On the left side of the Web Admin Panel \u2192 SYSTEM \u2192 Upgrade</p> <p>We offer three ways to upgrade the firmware.</p>"},{"location":"thread_board_router/gl-s20/user_manual/#online-upgrade","title":"Online Upgrade","text":"<p>You can check the current firmware version here. If your device is connected to the Internet, it will check for the newer firmware version available for download.</p> <p>Warning: During the upgrade, DO NOT turn off your device or refresh the page.</p> <p></p>"},{"location":"thread_board_router/gl-s20/user_manual/#local-upgrade","title":"Local Upgrade","text":"<p>From this page, you can upgrade the device's firmware.</p> <p>You can download the firmware from our download site.</p> <p></p> <p>Device use a Radio Co-Processor (RCP) design, and RCP firmware is designed to be upgraded separately. Please select or drag and drop the firmware file to the appropriate location.</p> <ul> <li>with the app firmware running on the main  processor and the rcp firmware running on the co-processor, and the web firmware is used to load web  page resources.</li> <li> <p>Click Apply Button to upgrade. Please note that keeping the configuration while using custom firmware may cause unexpected errors, so please proceed with caution.</p> </li> <li> <p>We won\u2019t verify the firmware due to maintaining flexibility in system upgrades, MAKE SURE you are uploading the correct file to the appropriate location. If you upload the incorrect firmware, it may cause a system error.</p> </li> <li>Warning: During the upgrade, DO NOT turn off your device or refresh the page.</li> </ul> <p>If you trunon Keep Settings, current settings will be retained.</p>"},{"location":"thread_board_router/gl-s20/user_manual/#custom-url-upgrade","title":"Custom URL upgrade","text":"<p>You can use the URL update the firmware. You must deploy the file by following the page prompts.</p> <p></p> <ul> <li>We won\u2019t verify the firmware due to maintaining flexibility in system upgrades,Make sure you upload the correct file to the URL you entered. If you upload the wrong firmware, it may cause a system error.</li> <li>The URL you enter must point to a path that contains three files.</li> <li>Please install the firmware with the following name: app.bin; rcp.bin; web.bin.</li> <li>Warning: During the upgrade, DO NOT turn off your device or refresh the page.</li> </ul> <p>If you enter a link with an encryption method, you will need to attach a certificate.</p> <p>Https certificates can be passed in two ways: urls and files</p> <p></p> <p>Keep Setting:  Please note that saving the configuration while using custom firmware may cause unexpected errors in the system, so please proceed with caution.</p>"},{"location":"thread_board_router/gl-s20/user_manual/#administrator-password","title":"Administrator password","text":"<p>On the left side of the Web Admin Panel \u2192 SYSTEM \u2192 Admin Password</p> <p></p> <p>To change the password for loggining into the Web Admin Panel, you will need to enter your current password.</p> <p>The rules for the new password are as follows:</p> <ul> <li>A minimum of 10 characters and a maximum of 31 characters.</li> <li>Only Letters (case sensitive), numbers and symbols <code>! @ # $ % ^ &amp; * ( ) _ + - = , . &gt; &lt; | ? / \\\\ { } : ; \" '</code> ~` are allowed.</li> <li>At least two of uppercase letters, lowercase letters, numbers, and symbols are required.</li> </ul>"},{"location":"thread_board_router/gl-s20/user_manual/#reset-firmware","title":"Reset Firmware","text":"<p>On the left side of the Web Admin Panel \u2192 SYSTEM \u2192 Reset Firmware</p> <p>In case of malfunction, you can reset the device.</p> <p>Warning: All your current settings, applications and data will be lost. The process will take about 10 seconds. DO NOT power off the device during this process.</p> <p></p> <p>If you can't access the Web Admin Panel, you can use the reset button as well, please press and hold the Reset button for 8 seconds. Release it when all 3 LEDs start flashing rapidly.</p> <p>Video guide: How to Reset GL.iNet S20 to Factory Default</p> <p>Still have questions? Visit our Community Forum ,or get in touch with our technical support team at support@glinet.biz</p>"},{"location":"thread_board_router/gl-s200/","title":"GL-S200","text":"<p>GL-S200 is a THREAD Border Router designed for users to host and manage low power and reliable IoT mesh networks. The device supports both THREAD and BLE protocols, and it comes with an optional pre-configured THREAD development board for a simplified integration process to IoT devices.</p> <p>GL-S200 is a firmware based on routers. It has many functions similar to our other routers, but also includes targeted IoT features, such as:</p> <ul> <li> <p>Bluetooth</p> </li> <li> <p>GL Dev Board</p> </li> <li> <p>Thread Mesh</p> </li> </ul> <p>For other functions that are the same as routers, please refer to the router documentation.</p> <ul> <li> <p>First time Setup</p> </li> <li> <p>Internet</p> <ul> <li>Internet</li> <li>Ethernet</li> <li>Repeater</li> <li>Cellular</li> <li>Tethering</li> </ul> </li> <li> <p>Wireless</p> </li> <li> <p>Clients</p> </li> <li> <p>VPN</p> <ul> <li>VPN Dashboard</li> <li>OpenVPN Client</li> <li>OpenVPN Server</li> <li>WireGuard Client</li> <li>WireGuard Server</li> </ul> </li> <li> <p>Applications</p> <ul> <li>Plug-ins</li> <li>Dynamic DNS</li> <li>GoodCloud</li> </ul> </li> <li> <p>Network</p> <ul> <li>Firewall</li> <li>LAN</li> <li>DNS</li> <li>Network Mode</li> <li>Mac Clone</li> <li>IGMP Snooping</li> </ul> </li> <li> <p>System</p> <ul> <li>Overview</li> <li>Upgrade</li> <li>Scheduled Tasks</li> <li>Admin Password</li> <li>Time Zone</li> <li>Toggle Button Settings</li> <li>Log</li> <li>Reset Firmware</li> <li>Advanced Settings</li> </ul> </li> </ul>"},{"location":"thread_board_router/gl-s200/bluetooth/","title":"Bluetooth","text":""},{"location":"thread_board_router/gl-s200/bluetooth/#bluetooth-devices","title":"Bluetooth Devices","text":"<p>On the Bluetooth devices page you can turn the current Bluetooth function on/off and modify the Bluetooth scanning settings.</p>"},{"location":"thread_board_router/gl-s200/bluetooth/#scan-settings","title":"Scan Settings","text":"<ul> <li>Scan type: switching between active or passive scanning.</li> <li>Scan Interval Time: the interval between the start times of two consecutive scan windows.</li> <li>Scan Window Time: the width of time to perform a scan.</li> <li>PHY: If coded phy is selected, traditional broadcast packets cannot be scanned.</li> </ul> <p>Click on Apply to complete the setup of Bluetooth scanning.</p>"},{"location":"thread_board_router/gl-s200/bluetooth/#bluetooth-scanning-mode","title":"Bluetooth Scanning Mode","text":"<p>The S200 offers three scanning modes: Legacy Mode, Extended Mode and Synchronize Mode. In Legacy Mode and Extended Mode, you can custom configure filters to filter the scanned Bluetooth data. If you change one of these configurations, click on this button to make the current configuration take effect.</p> <p></p> <p>RSSI Threshold\uff1aIf you set the threshold, the gateway will only report data from devices whose signal strength is greater than the value.</p> <p>MAC Filters\uff1aClick on the settings icon.If the switch is on, the configuration in the MAC filter will take effect. If the switch is off, the configuration in the filter will be disabled.MAC filter input rules are as follows.</p> <ul> <li>Case insensitive;</li> <li>Several MAC addresses distinguished by line feeds;</li> <li>Single MAC addresses support splitting by the character ':' and the character '-' ;</li> <li>Example of mac to be matched:112233445566<ul> <li>Prefix matching(needs to start with ^,followed by 1~12 hexadecimal characters)  e.g.^112233</li> <li>Suffix matching(needs to end with \\$,followed by 1~12 hexadecimal characters)  e.g.445566$</li> <li>Any position matching(limited to 1~12 hexadecimal characters)  e.g.334455</li> <li>Full match(Support for regular writing formats) e.g.112233445566/11:22:33:44:55:66/11-22-33-44-55-66</li> </ul> </li> </ul> <p></p> <p>Raw Data Filters :If you click on the settings icon, the configuration of the raw data filter will take effect if the switch is on, and if the switch is off, the configuration in the filter will be disabled. - The raw data filter supports all regular expressions and requires you to enter the data to be matched in hexadecimal format. - If you need an exact match for the field you are entering, add \"^\" and \"$\" before and after the field, e.g. \\^616263\\$.</p> <p></p> <p>Synchronize up to 4 cycles of broadcasts simultaneously in Synchronize Mode</p> <p></p> <ul> <li>Skip \uff1aMaximum number of periodic advertising packets that can be skipped after successful reception.</li> <li>Sync Timeout\uff1aThe maximum time allowed for successful reception, if this time is exceeded the sync will be lost.</li> </ul> <p>Click on Add Configuration for local configuration. </p> <ul> <li>Address Type: Address type of the device to be synchronized</li> <li>Address:Address of the device to be synchronized</li> <li>SID\uff1aAdvertising set identifiers</li> </ul>"},{"location":"thread_board_router/gl-s200/bluetooth/#broadcast-packets","title":"Broadcast Packets","text":"<p>After setting the Bluetooth scan settings correctly,click on the Apply button and you will see a list of scanned Bluetooth radio data appear below. You can refresh the list at any time by clicking the Refresh button.</p> <p></p> <ul> <li>RSSI: the wireless signal strength of this broadcast packet.</li> <li>Device Name: the data segment of this broadcast packet with an AD Type of 0x09, or Unknow if it does not exist.</li> <li>MAC: the MAC address of the source of this broadcast.</li> <li>Type: Types of Bluetooth packets as defined by the Bluetooth SIG\u3002</li> <li>Raw Data: the original data of this broadcast packet.</li> <li>TX Power:Transmitting power.</li> </ul> <p>If you need to see the details of a broadcast packet, please click on it. We provide two ways of presenting the data.</p> <ul> <li> <p>Structured data presentation: parsing the broadcast packet data according to the AD structure defined by the Bluetooth Alliance, splitting and parsing the data of the individual AD segments.</p> <p></p> </li> <li> <p>Raw data presentation: parsing of broadcast packet data according to the AD structure defined by the Bluetooth Alliance, splitting but not parsing out the raw data of individual AD segments.</p> </li> </ul>"},{"location":"thread_board_router/gl-s200/bluetooth/#bluetooth-remote-manage","title":"Bluetooth Remote Manage","text":"<p>On the Bluetooth Remote Management page you can choose to turn remote management on/off and modify the relevant remote server configuration.</p> <p></p> <p>We provide two methods of communication to the server: MQTT and HTTP.</p>"},{"location":"thread_board_router/gl-s200/bluetooth/#mqtt","title":"MQTT","text":"<ul> <li>Host\uff1aserver address, either a domain name or an IP address;</li> <li>Port\uff1aserver port;</li> <li>Enable TLS\uff1awhether to enable TLS configuration;</li> <li>Username\uff1athe MQTT client username;</li> <li>Password\uff1athe MQTT client password;</li> <li>Topic<ul> <li>Report: the gateway will use this topic to push the scanned Bluetooth data to the MQTT Broker;</li> <li>Command: the gateway will subscribe to the topic to receive control commands issued by the remote server;</li> <li>Response: the gateway will use the topic to send the command's response or execution result in response to the remote server.</li> </ul> </li> </ul> <p>If you need to enable TLS configuration, please click on the Enable TLS button and proceed to configure your TLS parameters.</p> <p></p> <ul> <li> <p>Encryption Mode\uff1aEncryption mode with the server side, either one-way or two-way encryption\uff1b</p> <p></p> </li> <li> <p>CA Certificate\uff1aa CA root certificate file must be uploaded when TLS encryption is enabled\uff1b</p> <ul> <li>You can copy the contents of the relevant certificate directly into the input box or click the Upload button to upload a file from your device.</li> <li> <p>Client Cerificate\uff1aa client certificate file must be uploaded when TLS bidirectional encryption is enabled\uff1b</p> </li> <li> <p>You can copy the contents of the relevant certificate directly into the input box or click the Upload button to upload a file from your device.</p> </li> <li> <p>Client Private Key\uff1aa client key file must be uploaded when TLS bidirectional encryption is enabled\uff1b</p> </li> <li> <p>You can copy the contents of the relevant certificate directly into the input box or click the Upload button to upload a file from your device.</p> </li> <li>Password of Key\uff1aoptional setting, password for encryption the client private key.</li> </ul> </li> </ul> <p>If you also need to set up more advanced MQTT options, you can click on Advance Settings.</p> <p></p> <ul> <li>Client ID\uff1athe client ID used by the gateway to connect to the server\uff1b</li> <li>QoS Level\uff1aQoS level of all topics, default is 0\uff1b</li> <li>Keep Alive Interval\uff1athe heartbeat interval when the gateway connects to the server, default is 60 seconds.</li> </ul>"},{"location":"thread_board_router/gl-s200/bluetooth/#http","title":"HTTP","text":"<p> - Report Url\uff1alink to data reporting; - Authentication Type\uff1aset the authentication method for http, currently choose between None or Basic authentication.</p> <pre><code>- If **Basic** is selected, the following configuration needs to be entered according to the server settings.\n\n    ![http-basic](https://static.gl-inet.com/docs/iot/en/ble_web_guide/http-basic.png)\n\n    - **Username**: the HTTP authentication username\n    - **Password**: the HTTP authentication password\n</code></pre>"},{"location":"thread_board_router/gl-s200/bluetooth/#bluetooth-report","title":"Bluetooth Report","text":"<p>On the Bluetooth report page, you can set the relevant parameters in it.</p>"},{"location":"thread_board_router/gl-s200/bluetooth/#base","title":"Base","text":"<ul> <li>Report Interval\uff1athe interval in seconds for the gateway to report data to the server;</li> <li>Data Format\uff1athe data format reported by the gateway to the server, currently only Json format is supported;</li> <li>Enable Broadcast Data Report\uff1aIf the option is enabled, each reported data will include complete broadcast packet data; otherwise, each reported data will only include the device MAC address and RSSI.</li> </ul>"},{"location":"thread_board_router/gl-s200/bluetooth/#bluetooth-settings-backuprestore","title":"Bluetooth Settings Backup/Restore","text":""},{"location":"thread_board_router/gl-s200/bluetooth/#backup","title":"Backup","text":"<p>You can export all Bluetooth-related settings on the page, including scan, connection, remote manage, report, data definition.</p> <p></p> <p>If you would like to export the SSL certificate associated with the server connection configured on the device, please tick the \"Include SSL certificate\" option.</p>"},{"location":"thread_board_router/gl-s200/bluetooth/#restore","title":"Restore","text":"<p>You can import a Bluetooth configuration that you have previously backed up or exported from another machine on the Bluetooth configuration restore page.</p>"},{"location":"thread_board_router/gl-s200/bluetooth/#_1","title":"Bluetooth","text":"<p>Still have questions? Visit our Community Forum.</p>"},{"location":"thread_board_router/gl-s200/hardware/","title":"Hardware","text":"<p>GL-S200 is a miniaturized Thread gateway supporting BLE protocol that runs on a highly customizable OpenWrt operating system and supports cloud device management. It has a versatile design for connecting to various smart home devices, or mass device connectivity for smart buildings.</p> <p></p>"},{"location":"thread_board_router/gl-s200/hardware/#specification","title":"Specification","text":"<p>GL-s200 specification</p>"},{"location":"thread_board_router/gl-s200/hardware/#gl-s200-pcb-pinout","title":"GL-S200 PCB Pinout","text":""},{"location":"thread_board_router/gl-s200/hardware/#gl-thread-dev-board-pinout","title":"GL Thread Dev Board Pinout","text":""},{"location":"thread_board_router/gl-s200/openthread_border_router_codelabs/","title":"GL.iNet OpenThread Border Router Codelabs","text":""},{"location":"thread_board_router/gl-s200/openthread_border_router_codelabs/#application-scenario","title":"Application Scenario","text":"<p>There are two applocation scenarioes, Direct Connection and Indirect Connection.</p> <ul> <li>Scenario 1, Direct Connection, PC/mobile phone connects OTBR directly.</li> <li>Scenario 2, Indirect Connection, PC/mobile phone and OTBR connect to the same upstream WiFi AP.</li> </ul> <p>GL.iNet OTBR is factory-configured with Scenario 1 by default. Users need to configure the upstream interface for the backbone router according to their own application scenarios on the web Admin Panel -&gt; THREAD MESH -&gt; Advanced -&gt; Backbone Routers.</p>"},{"location":"thread_board_router/gl-s200/openthread_border_router_codelabs/#scenario-1-direct-connection","title":"Scenario 1, Direct Connection","text":"<p>PC/mobile phone connects OTBR directly.</p> <p></p>"},{"location":"thread_board_router/gl-s200/openthread_border_router_codelabs/#scenario-2-indirect-connection","title":"Scenario 2, Indirect Connection","text":"<p>PC/mobile phone and OTBR connect to the same upstream WiFi AP.</p> <p></p>"},{"location":"thread_board_router/gl-s200/openthread_border_router_codelabs/#bi-directional-ipv6-connectivity-and-dns-based-service-discovery","title":"Bi-directional IPv6 connectivity and DNS-based service discovery","text":"<p>This experiment uses the following topology diagram</p> <ul> <li>Ubuntu 20.04.4</li> <li>NRF52840 USB dongle\uff08ot-nrf52840 - 2023-02-15-d88076e\uff09</li> <li>ot-br-posix - 2022-11-08-d910392</li> </ul> <p></p>"},{"location":"thread_board_router/gl-s200/openthread_border_router_codelabs/#step-1-create-a-thread-network","title":"Step 1: Create a Thread network","text":"<pre><code>root@GL-S200:~# uci set otbr.otbr.enable=1\nroot@GL-S200:~# uci commit otbr\n\nroot@GL-S200:~# ot-ctl dataset init new\nDone\nroot@GL-S200:~# ot-ctl dataset commit active\nDone\nroot@GL-S200:~# ot-ctl dataset active\nActive Timestamp: 1\nChannel: 18\nChannel Mask: 0x07fff800\nExt PAN ID: a1fce8946f2f9b1d\nMesh Local Prefix: fd50:5ff6:fd1b:325b::/64\nNetwork Key: e67446d4e450ad76cd3ad5472530d410\nNetwork Name: OpenThread-ee97\nPAN ID: 0xee97\nPSKc: 42743e8b67c06353cd038520a0ab8b7f\nSecurity Policy: 672 onrc\nDone\nroot@GL-S200:~# ot-ctl ifconfig up\nDone\nroot@GL-S200:~# ot-ctl thread start\nDone\nroot@GL-S200:~# ot-ctl state\nleader\nDone\nroot@GL-S200:~# ot-ctl dataset active -x\n0e080000000000010000000300001235060004001fffe00208a1fce8946f2f9b1d0708fd505ff6fd1b325b0510e67446d4e450ad76cd3ad5472530d410030f4f70656e5468726561642d656539370102ee97041042743e8b67c06353cd038520a0ab8b7f0c0402a0f7f8\nDone\nroot@GL-S200:~# ot-ctl netdata show\nPrefixes:\nfd15:5b2d:647f:1::/64 paos low c400\nRoutes:\nfd15:5b2d:647f:2:0:0::/96 sn low c400\nfda1:fce8:946f:9b1d::/64 s med c400\nServices:\n44970 5d fd505ff6fd1b325b84ab8a51482f2df7d11f s c400\n44970 01 31000500000e10 s c400\nDone\nroot@GL-S200:~# ot-ctl ipaddr\nfd50:5ff6:fd1b:325b:0:ff:fe00:fc11\nfd50:5ff6:fd1b:325b:0:ff:fe00:fc38\nfd15:5b2d:647f:1:4e73:fe27:fcad:9eb4\nfd50:5ff6:fd1b:325b:0:ff:fe00:fc10\nfd50:5ff6:fd1b:325b:0:ff:fe00:fc00\nfd50:5ff6:fd1b:325b:0:ff:fe00:c400\nfd50:5ff6:fd1b:325b:84ab:8a51:482f:2df7\nfe80:0:0:0:3488:80b2:ca62:867d\nDone\n</code></pre> <p>Check the connectivity of OTBR on your phone/PC.</p> <pre><code>$ ping -6 -c1 fd15:5b2d:647f:1:4e73:fe27:fcad:9eb4\nPING fd15:5b2d:647f:1:4e73:fe27:fcad:9eb4(fd15:5b2d:647f:1:4e73:fe27:fcad:9eb4) 56 data bytes\n64 bytes from fd15:5b2d:647f:1:4e73:fe27:fcad:9eb4: icmp_seq=1 ttl=64 time=0.996 ms\n\n--- fd15:5b2d:647f:1:4e73:fe27:fcad:9eb4 ping statistics ---\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\nrtt min/avg/max/mdev = 0.996/0.996/0.996/0.000 ms\n</code></pre>"},{"location":"thread_board_router/gl-s200/openthread_border_router_codelabs/#step-2-configure-the-srp-client-terminal-device","title":"Step 2: Configure the SRP client terminal device","text":"<p>To be executed on NRF52840.</p> <pre><code>&gt; dataset set active 0e080000000000010000000300001235060004001fffe00208a1fce8946f2f9b1d0708fd505ff6fd1b325b0510e67446d4e450ad76cd3ad5472530d410030f4f70656e5468726561642d656539370102ee97041042743e8b67c06353cd038520a0ab8b7f0c0402a0f7f8\nDone\n&gt; ifconfig up\nDone\n&gt; thread start\nDone\n&gt; state\nchild\nDone\n&gt; netdata show\nPrefixes:\nfd15:5b2d:647f:1::/64 paos low fffe\nRoutes:\nfd15:5b2d:647f:2:0:0::/96 sn low fffe\nfda1:fce8:946f:9b1d::/64 s med fffe\nServices:\n44970 5d fd505ff6fd1b325b84ab8a51482f2df7d11f s fc10\n44970 01 31000500000e10 s fc11\nDone\n&gt; ipaddr\nfd15:5b2d:647f:1:75cd:be97:fd26:f3b9\nfd50:5ff6:fd1b:325b:0:ff:fe00:c401\nfd50:5ff6:fd1b:325b:27af:b1fc:9225:4134\nfe80:0:0:0:3873:7703:285d:38eb\nDone\n</code></pre> <p>Check the Thread Device connectivity on the mobile phone/PC.</p> <pre><code>$ ping -6 -c1 fd15:5b2d:647f:1:75cd:be97:fd26:f3b9\nPING fd15:5b2d:647f:1:75cd:be97:fd26:f3b9(fd15:5b2d:647f:1:75cd:be97:fd26:f3b9) 56 data bytes\n64 bytes from fd15:5b2d:647f:1:75cd:be97:fd26:f3b9: icmp_seq=1 ttl=63 time=41.1 ms\n\n--- fd15:5b2d:647f:1:75cd:be97:fd26:f3b9 ping statistics ---\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\nrtt min/avg/max/mdev = 41.148/41.148/41.148/0.000 ms\n</code></pre>"},{"location":"thread_board_router/gl-s200/openthread_border_router_codelabs/#step-3-publish-srp-service-on-the-terminal-device","title":"Step 3: Publish SRP service on the terminal device","text":"<pre><code>&gt; srp client autostart enable\nDone\n&gt; srp client host name ot-host\nDone\n&gt; srp client host address fd15:5b2d:647f:1:75cd:be97:fd26:f3b9\nDone\n&gt; srp client service add ot-service _ipps._tcp 12345\nDone\n&gt; srp client service\ninstance:\"ot-service\", name:\"_ipps._tcp\", state:Registered, port:12345, priority:0, weight:0\nDone\n</code></pre>"},{"location":"thread_board_router/gl-s200/openthread_border_router_codelabs/#step-4-discover-services-on-otbr","title":"Step 4: Discover services on OTBR","text":"<pre><code>root@GL-S200:~# ot-ctl srp server service\not-service._ipps._tcp.default.service.arpa.\n    deleted: false\n    subtypes: (null)\n    port: 12345\n    priority: 0\n    weight: 0\n    ttl: 7200\n    lease: 7200\n    key-lease: 1209600\n    TXT: []\n    host: ot-host.default.service.arpa.\n    addresses: [fd15:5b2d:647f:1:75cd:be97:fd26:f3b9]\nDone\nroot@GL-S200:~# dns-sd -B _ipps._tcp\nBrowsing for _ipps._tcp\nDATE: ---Wed 15 Mar 2023---\n 8:41:10.598  ...STARTING...\nTimestamp     A/R    Flags  if Domain               Service Type         Instance Name\n 8:41:10.600  Add        3   6 local.               _ipps._tcp.          ot-service\n 8:41:10.602  Add        2   7 local.               _ipps._tcp.          ot-service\n^C\nroot@GL-S200:~# dns-sd -L ot-service _ipps._tcp.\nLookup ot-service._ipps._tcp..local\nDATE: ---Wed 15 Mar 2023---\n 8:41:16.522  ...STARTING...\n 8:41:16.666  ot-service._ipps._tcp.local. can be reached at ot-host.local.:12345 (interface 6) Flags: 1\n 8:41:16.668  ot-service._ipps._tcp.local. can be reached at ot-host.local.:12345 (interface 7)\n^C\nroot@GL-S200:~# dns-sd -G -v6 ot-host.local.\nDATE: ---Wed 15 Mar 2023---\n 8:41:21.478  ...STARTING...\nTimestamp     A/R    Flags if Hostname                               Address                                      TTL\n 8:41:21.653  Add        3  6 ot-host.local.                         FD15:5B2D:647F:0001:75CD:BE97:FD26:F3B9%&lt;0&gt;  120\n 8:41:21.656  Add        2  7 ot-host.local.                         FD15:5B2D:647F:0001:75CD:BE97:FD26:F3B9%&lt;0&gt;  120\n^C\nroot@GL-S200:~# ping -6 -c1 fd15:5b2d:647f:1:75cd:be97:fd26:f3b9\nPING fd15:5b2d:647f:1:75cd:be97:fd26:f3b9 (fd15:5b2d:647f:1:75cd:be97:fd26:f3b9): 56 data bytes\n64 bytes from fd15:5b2d:647f:1:75cd:be97:fd26:f3b9: seq=0 ttl=64 time=33.375 ms\n\n--- fd15:5b2d:647f:1:75cd:be97:fd26:f3b9 ping statistics ---\n1 packets transmitted, 1 packets received, 0% packet loss\nround-trip min/avg/max = 33.375/33.375/33.375 ms\n</code></pre>"},{"location":"thread_board_router/gl-s200/openthread_border_router_codelabs/#step-5-discover-services-on-pc","title":"Step 5: Discover services on PC","text":"<p>Use <code>dns-sd</code>on macOS system.</p> <pre><code>$ dns-sd -B _ipps._tcp\nBrowsing for _ipps._tcp\nDATE: ---Wed 15 Mar 2023---\n16:42:03.955  ...STARTING...\nTimestamp     A/R    Flags  if Domain               Service Type         Instance Name\n16:42:03.958  Add        2   2 local.               _ipps._tcp.          ot-service\n\n$ dns-sd -L ot-service _ipps._tcp.\nLookup ot-service._ipps._tcp..local\nDATE: ---Wed 15 Mar 2023---\n16:42:13.192  ...STARTING...\n16:42:13.193  ot-service._ipps._tcp.local. can be reached at ot-host.local.:12345 (interface 2)\n\n$ dns-sd -G -v6 ot-host.local.\nDATE: ---Wed 15 Mar 2023---\n16:42:18.168  ...STARTING...\nTimestamp     A/R    Flags if Hostname                               Address                                      TTL\n16:42:18.169  Add 40000002  2 ot-host.local.                         FD15:5B2D:647F:0001:75CD:BE97:FD26:F3B9%&lt;0&gt;  120\n</code></pre> <p>Use <code>avahi-browser</code> on Linux system.</p> <pre><code>$ avahi-browse -rt _ipps._tcp\n+  ens33 IPv6 ot-service                                    Secure Internet Printer local\n+  ens33 IPv4 ot-service                                    Secure Internet Printer local\n=  ens33 IPv6 ot-service                                    Secure Internet Printer local\n   hostname = [ot-host.local]\n   address = [fd15:5b2d:647f:1:75cd:be97:fd26:f3b9]\n   port = [12345]\n   txt = []\n=  ens33 IPv4 ot-service                                    Secure Internet Printer local\n   hostname = [ot-host.local]\n   address = [fd15:5b2d:647f:1:75cd:be97:fd26:f3b9]\n   port = [12345]\n   txt = []\n</code></pre>"},{"location":"thread_board_router/gl-s200/openthread_border_router_codelabs/#step-6-ping-the-terminal-devices-local-domain-name-on-pc","title":"Step 6: Ping the terminal device's local domain name on PC","text":"<pre><code>$ ping -6 -c1 ot-host.local\nPING ot-host.local(fd15:5b2d:647f:1:75cd:be97:fd26:f3b9 (fd15:5b2d:647f:1:75cd:be97:fd26:f3b9)) 56 data bytes\n64 bytes from fd15:5b2d:647f:1:75cd:be97:fd26:f3b9 (fd15:5b2d:647f:1:75cd:be97:fd26:f3b9): icmp_seq=1 ttl=63 time=30.4 ms\n\n--- ot-host.local ping statistics ---\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\nrtt min/avg/max/mdev = 30.360/30.360/30.360/0.000 ms\n</code></pre> <p>If the ping command returns <code>Name or service not known</code> , modify <code>/etc/nsswitch.conf</code> as follows and try again. The domain name should be resolvable on both OTBR and PC.</p> <pre><code>hosts:          files mdns4_minimal mdns6_minimal dns\n</code></pre>"},{"location":"thread_board_router/gl-s200/openthread_border_router_codelabs/#providing-internet-access-via-nat64","title":"Providing Internet access via NAT64","text":"<p>Nat64 is enabled by default. After creating a Thread network and joining Thread devices to the network according to the instructions for the experiment on bi-directional IPv6 connectivity and DNS-based service discovery,</p> <ul> <li>Accessing Local Area Network.</li> </ul> <pre><code>&gt; ping 192.168.8.233\nPinging synthesized IPv6 address: fdf8:7dfb:4d50:2:0:0:c0a8:8e9\n16 bytes from fdf8:7dfb:4d50:2:0:0:c0a8:8e9: icmp_seq=3 hlim=63 time=15ms\n1 packets transmitted, 1 packets received. Packet loss = 0.0%. Round-trip min/avg/max = 15/15.0/15 ms.\nDone\n</code></pre> <ul> <li>Accessing the Internet.</li> </ul> <pre><code>&gt; ping 8.8.8.8\nPinging synthesized IPv6 address: fdf8:7dfb:4d50:2:0:0:808:808\n16 bytes from fdf8:7dfb:4d50:2:0:0:808:808: icmp_seq=4 hlim=47 time=75ms\n1 packets transmitted, 1 packets received. Packet loss = 0.0%. Round-trip min/avg/max = 75/75.0/75 ms.\nDone\n&gt; dns resolve4 google.com 8.8.8.8\nSynthesized IPv6 DNS server address: fdf8:7dfb:4d50:2:0:0:808:808\nDNS response for google.com. - fdf8:7dfb:4d50:2:0:0:8efb:dc4e TTL:127\nDone\n&gt; ping fdf8:7dfb:4d50:2:0:0:8efb:dc4e\n16 bytes from fdf8:7dfb:4d50:2:0:0:8efb:dc4e: icmp_seq=5 hlim=106 time=96ms\n1 packets transmitted, 1 packets received. Packet loss = 0.0%. Round-trip min/avg/max = 96/96.0/96 ms.\nDone\n</code></pre>"},{"location":"thread_board_router/gl-s200/openthread_border_router_codelabs/#matter-over-thread","title":"Matter Over Thread","text":"<p>The topology of this experiment is shown in the following diagram, where the Matter Controller runs on a PC, and the Matter Light and Matter Light Switch both use the Silicon Labs EFR32MG24 Breakout Board REV 1.1 as the Matter device.</p> <p></p>"},{"location":"thread_board_router/gl-s200/openthread_border_router_codelabs/#step-1-create-a-thread-network_1","title":"Step 1: Create a Thread network.","text":"<pre><code>root@GL-S200:~# ot-ctl dataset init new\nDone\nroot@GL-S200:~# ot-ctl dataset commit active\nDone\nroot@GL-S200:~# ot-ctl dataset active\nActive Timestamp: 1\nChannel: 18\nChannel Mask: 0x07fff800\nExt PAN ID: a1fce8946f2f9b1d\nMesh Local Prefix: fd50:5ff6:fd1b:325b::/64\nNetwork Key: e67446d4e450ad76cd3ad5472530d410\nNetwork Name: OpenThread-ee97\nPAN ID: 0xee97\nPSKc: 42743e8b67c06353cd038520a0ab8b7f\nSecurity Policy: 672 onrc\nDone\nroot@GL-S200:~# ot-ctl ifconfig up\nDone\nroot@GL-S200:~# ot-ctl thread start\nDone\nroot@GL-S200:~# ot-ctl state\nleader\nDone\nroot@GL-S200:~# ot-ctl dataset active -x\n0e080000000000010000000300001235060004001fffe00208a1fce8946f2f9b1d0708fd505ff6fd1b325b0510e67446d4e450ad76cd3ad5472530d410030f4f70656e5468726561642d656539370102ee97041042743e8b67c06353cd038520a0ab8b7f0c0402a0f7f8\nDone\nroot@GL-S200:~# ot-ctl netdata show\nPrefixes:\nfd15:5b2d:647f:1::/64 paos low c400\nRoutes:\nfd15:5b2d:647f:2:0:0::/96 sn low c400\nfda1:fce8:946f:9b1d::/64 s med c400\nServices:\n44970 5d fd505ff6fd1b325b84ab8a51482f2df7d11f s c400\n44970 01 31000500000e10 s c400\nDone\nroot@GL-S200:~# ot-ctl ipaddr\nfd50:5ff6:fd1b:325b:0:ff:fe00:fc11\nfd50:5ff6:fd1b:325b:0:ff:fe00:fc38\nfd15:5b2d:647f:1:4e73:fe27:fcad:9eb4\nfd50:5ff6:fd1b:325b:0:ff:fe00:fc10\nfd50:5ff6:fd1b:325b:0:ff:fe00:fc00\nfd50:5ff6:fd1b:325b:0:ff:fe00:c400\nfd50:5ff6:fd1b:325b:84ab:8a51:482f:2df7\nfe80:0:0:0:3488:80b2:ca62:867d\nDone\n</code></pre>"},{"location":"thread_board_router/gl-s200/openthread_border_router_codelabs/#step-2-commissioning","title":"Step 2: Commissioning","text":"<p>Command format:</p> <pre><code>chip-tool pairing ble-thread ${NODE_ID} hex:${DATASET} ${PIN_CODE} ${DISCRIMINATOR}\n</code></pre> <ul> <li><code>${NODE_ID}</code>\uff1aAssign an ID to the commissioned device. It can be any non-zero value that has not been used after RCP initialization, and it is used by the chip-tool to operate on this Matter device.</li> <li><code>${DATASET}</code>\uff1a Obtained by running the command <code>ot-ctl dataset active -x</code></li> <li><code>${PIN_CODE}</code>\uff1aIf the pairing code has not been configured in the flash memory, use the default pairing code.</li> <li><code>${DISCRIMINATOR}</code>\uff1aIf pairing code is not configured in flash yet, use the default pairing code.</li> </ul> <p>When you long-press the BT0 button on the Matter Light for more than 6 seconds, it enters commissioning mode.</p> <pre><code>sudo ./out/chip-tool/chip-tool pairing ble-thread 1001 hex:0e080000000000010000000300001235060004001fffe00208a1fce8946f2f9b1d0708fd505ff6fd1b325b0510e67446d4e450ad76cd3ad5472530d410030f4f70656e5468726561642d656539370102ee97041042743e8b67c06353cd038520a0ab8b7f0c0402a0f7f8 20202021 3840\n</code></pre> <p>Press and hold the BT0 button of the Matter Light Switch for more than 6 seconds to enter commissioning mode.</p> <pre><code>sudo ./out/chip-tool/chip-tool pairing ble-thread 1002 hex:0e080000000000010000000300001235060004001fffe00208a1fce8946f2f9b1d0708fd505ff6fd1b325b0510e67446d4e450ad76cd3ad5472530d410030f4f70656e5468726561642d656539370102ee97041042743e8b67c06353cd038520a0ab8b7f0c0402a0f7f8 20202021 3840\n</code></pre> <p>If there is no error, the output of the command should look like the following:</p> <pre><code>[1678871136.912386][3259774:3259774] CHIP:DL: Inet Layer shutdown\n[1678871136.912404][3259774:3259774] CHIP:DL: BLE shutdown\n[1678871136.913326][3259774:3259774] CHIP:DL: System Layer shutdown\n</code></pre> <p>Discovery Matter device from PC,</p> <pre><code>$ avahi-browse -rt _matter._tcp\n+ enp0s31f6 IPv6 65D508548AF4E6CD-00000000000003EA             _matter._tcp         local\n+ enp0s31f6 IPv6 65D508548AF4E6CD-00000000000003E9             _matter._tcp         local\n+ enp0s31f6 IPv4 65D508548AF4E6CD-00000000000003EA             _matter._tcp         local\n+ enp0s31f6 IPv4 65D508548AF4E6CD-00000000000003E9             _matter._tcp         local\n= enp0s31f6 IPv6 65D508548AF4E6CD-00000000000003EA             _matter._tcp         local\n   hostname = [DEE6259B059B0BB6.local]\n   address = [fd15:5b2d:647f:1:25b3:9abe:d387:e9aa]\n   port = [5540]\n   txt = [\"T=0\" \"SAI=2000\" \"SII=5000\"]\n= enp0s31f6 IPv6 65D508548AF4E6CD-00000000000003E9             _matter._tcp         local\n   hostname = [3EF840EF1D01024D.local]\n   address = [fd15:5b2d:647f:1:b5be:90a6:6fde:a8dc]\n   port = [5540]\n   txt = [\"T=0\" \"SAI=2000\" \"SII=5000\"]\n= enp0s31f6 IPv4 65D508548AF4E6CD-00000000000003EA             _matter._tcp         local\n   hostname = [DEE6259B059B0BB6.local]\n   address = [fd15:5b2d:647f:1:25b3:9abe:d387:e9aa]\n   port = [5540]\n   txt = [\"T=0\" \"SAI=2000\" \"SII=5000\"]\n= enp0s31f6 IPv4 65D508548AF4E6CD-00000000000003E9             _matter._tcp         local\n   hostname = [3EF840EF1D01024D.local]\n   address = [fd15:5b2d:647f:1:b5be:90a6:6fde:a8dc]\n   port = [5540]\n   txt = [\"T=0\" \"SAI=2000\" \"SII=5000\"]\n\n$ avahi-browse -rt _matterc._udp\n+ enp0s31f6 IPv6 18D347F0BB27870E                              _matterc._udp        local\n+ enp0s31f6 IPv4 18D347F0BB27870E                              _matterc._udp        local\n= enp0s31f6 IPv6 18D347F0BB27870E                              _matterc._udp        local\n   hostname = [DEE6259B059B0BB6.local]\n   address = [fd15:5b2d:647f:1:25b3:9abe:d387:e9aa]\n   port = [5540]\n   txt = [\"PI=\" \"PH=36\" \"CM=0\" \"D=3840\" \"T=0\" \"SAI=2000\" \"SII=5000\" \"VP=65521+32772\"]\n= enp0s31f6 IPv4 18D347F0BB27870E                              _matterc._udp        local\n   hostname = [DEE6259B059B0BB6.local]\n   address = [fd15:5b2d:647f:1:25b3:9abe:d387:e9aa]\n   port = [5540]\n   txt = [\"PI=\" \"PH=36\" \"CM=0\" \"D=3840\" \"T=0\" \"SAI=2000\" \"SII=5000\" \"VP=65521+32772\"]\n\n$ ping -6 -c1 3EF840EF1D01024D.local\nPING 3EF840EF1D01024D.local(fd15:5b2d:647f:1:b5be:90a6:6fde:a8dc (fd15:5b2d:647f:1:b5be:90a6:6fde:a8dc)) 56 data bytes\n64 bytes from fd15:5b2d:647f:1:b5be:90a6:6fde:a8dc (fd15:5b2d:647f:1:b5be:90a6:6fde:a8dc): icmp_seq=1 ttl=63 time=82.9 ms\n\n--- 3EF840EF1D01024D.local ping statistics ---\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\nrtt min/avg/max/mdev = 82.865/82.865/82.865/0.000 ms\n\n$ ping -6 -c1 DEE6259B059B0BB6.local\nPING DEE6259B059B0BB6.local(fd15:5b2d:647f:1:25b3:9abe:d387:e9aa (fd15:5b2d:647f:1:25b3:9abe:d387:e9aa)) 56 data bytes\n64 bytes from fd15:5b2d:647f:1:25b3:9abe:d387:e9aa (fd15:5b2d:647f:1:25b3:9abe:d387:e9aa): icmp_seq=1 ttl=63 time=69.3 ms\n\n--- DEE6259B059B0BB6.local ping statistics ---\n1 packets transmitted, 1 received, 0% packet loss, time 0ms\nrtt min/avg/max/mdev = 69.331/69.331/69.331/0.000 ms\n</code></pre>"},{"location":"thread_board_router/gl-s200/openthread_border_router_codelabs/#step-3-control-the-light","title":"Step 3: Control the Light","text":"<ol> <li> <p>Toggle the Light</p> <p>Command Format : <code>chip-tool onoff toggle ${NODE_ID} 1</code></p> <p>Example\uff1a</p> <pre><code>sudo ./out/chip-tool/chip-tool onoff toggle 1001 1\n</code></pre> </li> <li> <p>Turn On the Light</p> <p>Command Format : <code>chip-tool onoff on ${NODE_ID} 1</code></p> <p>Example\uff1a</p> <pre><code>sudo ./out/chip-tool/chip-tool onoff on 1001 1\n</code></pre> </li> <li> <p>Turn Off the Light</p> <p>Command Format : <code>chip-tool onoff off ${NODE_ID} 1</code></p> <p>Example\uff1a</p> <pre><code>sudo ./out/chip-tool/chip-tool onoff off 1001 1\n</code></pre> </li> <li> <p>Read the State of the Light</p> <p>Command Format : <code>chip-tool onoff read on-off ${NODE_ID} 1</code></p> <p>Example\uff1a</p> <pre><code>sudo ./out/chip-tool/chip-tool onoff read on-off 1001 1\n</code></pre> </li> </ol>"},{"location":"thread_board_router/gl-s200/openthread_border_router_codelabs/#step-4-use-the-matter-switch-to-control-the-light","title":"Step 4: Use the Matter Switch to Control the Light","text":"<ol> <li> <p>Set the ACL of the Light to Allow the Switch to Control It</p> <p>For ACL parameter explanation, please refer to Matter Core Specification - 9.10.5.3. ACL Attribute</p> <p>Command Format :</p> <pre><code>sudo ./out/chip-tool/chip-tool accesscontrol write acl '[{\"fabricIndex\":1, \"privilege\":5, \"authMode\":2, \"subjects\":[112233, ${switch_node_id}], \"targets\":null}]' ${lighting_node_id} 0\n</code></pre> <p>Example\uff1a</p> <pre><code>sudo ./out/chip-tool/chip-tool accesscontrol write acl '[{\"fabricIndex\":1, \"privilege\":5, \"authMode\":2, \"subjects\":[112233, 1002], \"targets\":null}]' 1001 0\n</code></pre> </li> <li> <p>Bind the Switch to the Light</p> <p>Command Format :</p> <pre><code>sudo ./out/chip-tool/chip-tool binding write binding '[{\"fabricIndex\":1, \"node\":${lighting_node_id}, \"endpoint\":1, \"cluster\":6}]' ${switch_node_id} 1\n</code></pre> <p>Example\uff1a</p> <pre><code>sudo ./out/chip-tool/chip-tool binding write binding '[{\"fabricIndex\":1, \"node\":1001, \"endpoint\":1, \"cluster\":6}]' 1002 1\n</code></pre> <p>After completing the above steps, you can use Matter Switch BTN1 to control the on/off state of Matter Light.</p> </li> </ol>"},{"location":"thread_board_router/gl-s200/openthread_border_router_codelabs/#connect-to-home-assistant","title":"Connect to Home Assistant","text":"<p>Test environment</p> <ul> <li>Raspberrypi 4B, Debian GNU/Linux 11 (bullseye)</li> <li>GL-S200</li> </ul> <p>Refer to the documentation https://www.home-assistant.io/installation/raspberrypi to install Home Assistant on Raspberrypi.</p> <p>The GL-S200 needs to upgrade snapshot firmware.</p> <p>Noted: Due to Thread certification reasons, we will not release this feature in stable firmware in the short term.</p> <p>Open the Home Assistant admin panel, Settings -&gt; Devices&amp;Services -&gt; Thread -&gt; CONFIGURE -&gt; ADD AN OPENTHREAD BORDER ROUTER, input the URL <code>http://&lt;ip&gt;:8081</code> and submit. As shown in the following figure,  <code>192.168.90.182</code> is the IP assigned by the superior router. If your Home Assistant is connected directly to GL OTBR via WiFi/Ethernet, you can use <code>192.168.8.1</code>.</p> <p></p> <p>Now, The GL.iNet OTBR is successfully added to the Preferred network.</p> <p></p> <p>Still have questions? Visit our Community Forum.</p>"},{"location":"thread_board_router/gl-s200/software/","title":"Software","text":"<p>Coming soon</p>"},{"location":"thread_board_router/gl-s200/thread_mesh/","title":"Thread Mesh","text":""},{"location":"thread_board_router/gl-s200/thread_mesh/#thread-network","title":"Thread Network","text":"<p>You can configure and manage Thread Network settings on the Thread Network page.</p> <p></p> <ul> <li>EUI-64\uff1aUnique device identifier, hexadecimal number of 8 bytes in length.</li> <li>Ext Mac\uff1aThe device extension address, a unique identifier in the Thread network, is a hexadecimal number of 8 bytes in length. The extended address is randomly generated and will be re-randomized when the system is restored to factory settings.</li> <li>Thread Version\uff1aCurrent thread protocol version.</li> <li>Tx Power\uff1aTransmit power, 0~20dBm, default is 20dBm.</li> <li>Network Name\uff1aThread network name, 1 to 16 characters long, used to generate PSKc (Pre-Shared Key for the Commissioner), default format  - &lt;3 characters after MAC address&gt;. <li>PAN ID\uff1aIEEE 802.15.4 MAC layer unique identifier, default value is 2 bytes after the MAC address in hexadecimal format.</li> <li>Extended PAN ID\uff1aThread network extension PAN ID for PSKc generation.</li> <li>Network Key\uff1aThread network key, a hexadecimal number of 16 bytes in length.</li> <li>Channel\uff1aThread network channel, 11~26, default value is 26.</li> <li>Commissioner Credential\uff1aUser-defined string, UTF-8 encoded characters from 6 to 255 in length, used to generate PSKc, default value is goodlife.</li> <p>Network Name/ PAN ID/ Extended PAN ID/ Network Key is generated based on the MAC address of the device.</p>"},{"location":"thread_board_router/gl-s200/thread_mesh/#create-a-new-network","title":"Create a new network","text":"<p>You can create a new network directly by using the default configuration and clicking Enable. You can then see that the status of the S200 has changed from Detached to Leader, which means that a new network has been created.</p> <p>Note: If you have the same network settings as an existing Thread network in your current environment, then the S200 will automatically join that network.</p> <p></p> <p>If you want to set some parameters manually, you can configure them by clicking on the Manual Setup.</p> <p></p>"},{"location":"thread_board_router/gl-s200/thread_mesh/#join-an-existing-network","title":"Join an existing network","text":"<p>We support the following 4 ways to add the S200 to an existing network.</p>"},{"location":"thread_board_router/gl-s200/thread_mesh/#join-the-network-by-using-network-key","title":"Join the network by using Network Key","text":"<p>Click on the Join Network and the GL-S200 will scan the surrounding available Thread networks.</p> <p></p> <p>Select the Thread network you want to join in the pop-up window, enter its Network Key and apply it.</p> <p></p>"},{"location":"thread_board_router/gl-s200/thread_mesh/#join-the-network-by-using-the-commissioner","title":"Join the network by using the Commissioner","text":"<ol> <li> <p>Using another GL.iNET S200 as the Commissioner (please refer to the Thread Commissioning page guide), enter the Joiner EUI64 and Joiner Credential of the S200 to be connected to the network.</p> </li> <li> <p>Click on the  \"Join Network\" on the S200 to be connected to the network, select \"Join With Commissioner\" in the pop-up window, enter the Joiner Credential and apply it.</p> </li> <li> <p>A successful Join Network will automatically jump to display the status page.</p> <p></p> </li> </ol>"},{"location":"thread_board_router/gl-s200/thread_mesh/#networking-using-import-thread-network-configuration","title":"Networking using import Thread network configuration","text":"<p>To facilitate deployment, we can import the same Thread network configuration directly to the device so that devices with the same Thread network configuration are automatically networked after they are up. You can import and export by clicking on Import Setting/Export Setting in the top right hand corner of the Thread Network page.</p> <p></p> <p></p> <p>Note: You can only export when the Thread Network is up, or import when the Thread Network is down.</p>"},{"location":"thread_board_router/gl-s200/thread_mesh/#join-the-network-by-using-external-commissioner","title":"Join the network by using External Commissioner","text":"<p>In the Thread network, the GL.iNET S200 acts as a border agent to support external commissioners, which can be a mobile phone or a PC.</p> <p></p> <ol> <li> <p>Download Commissioner App</p> <ul> <li> <p>OT Commissioner Android App</p> </li> <li> <p>Thread Group Android App</p> </li> </ul> </li> <li> <p>Open the app after connecting the GL-S200 via WiFi.</p> </li> <li> <p>Select one of the AVALABLE BORDER ROUTERS and click on it and enter the Commissioner Credential.</p> <p></p> </li> <li> <p>If step 3 is entered correctly, you can scan the QR code on the GL-S200 Join With Commissioner page and click Apply on the GL-S200 page to start the process.</p> <p></p> </li> </ol>"},{"location":"thread_board_router/gl-s200/thread_mesh/#export-thread-network-settings","title":"Export thread network settings","text":"<p>You can copy the thread network dataset TLV data or download it in the file.</p> <p></p>"},{"location":"thread_board_router/gl-s200/thread_mesh/#thread-commissioning","title":"Thread Commissioning","text":"<p>You can add new devices to the network on this page, and GL-S200 supports bulk imports.</p> <p></p> <ul> <li> <p>The Joiners card shows the list of Joiners to be added to the network</p> </li> <li> <p>The Commission Records card shows Joiner's network entry history.</p> <ul> <li> <p>For Joined/Timeout devices, click Action -&gt; Rejoin to re-enter the network without re-entering\uff1b</p> <p></p> </li> <li> <p>For all devices with Joined/Join Fail status, you can also click on Rejoin All to re-enter the network in bulk</p> <p></p> </li> </ul> </li> </ul>"},{"location":"thread_board_router/gl-s200/thread_mesh/#add-a-single-device","title":"Add a single device","text":"<ul> <li>Joiner EUI-64: Joiner's EUI-64 or type * to match all Joiners.</li> <li>Joiner Credential: The device credentials to be added must be a string containing all uppercase letters and numbers and must not contain the letters I, O, Q and Z, between 6 and 32 characters in length.</li> <li>Joiner Timeout: Joiner access timeout, during which a Joiner can access the network using valid credentials.</li> </ul>"},{"location":"thread_board_router/gl-s200/thread_mesh/#add-devices-in-batches","title":"Add devices in batches","text":"<p>If the device vendor has set different Joiner credentials for each Thread device, you will need this feature when deploying. Clicking Download template to download the template or export the saved Joiner list, fill in or add the Joiner EUI64 and Joiner Credential, then click Select to import.</p> <p></p>"},{"location":"thread_board_router/gl-s200/thread_mesh/#thread-topologies","title":"Thread Topologies","text":"<p>The network topology data is obtained by sending multicast packets. The network topology data allows you to view information about each node such as IPv6 address, mode of operation, directly connected sub-nodes, etc.</p> <p></p> <p></p> <p>You can click on any device to view information about that device.</p> <p></p>"},{"location":"thread_board_router/gl-s200/thread_mesh/#advanced","title":"Advanced","text":"<p>We have provided some advanced configurations related to Thread networking. Normally we do not recommend that users modify these parameters.</p>"},{"location":"thread_board_router/gl-s200/thread_mesh/#srp-server","title":"SRP Server","text":"<p>SRP (Service Registration Protocol) is a service registration and discovery protocol. The IP of devices on an IP-based network is not usually fixed, so communication is not possible without determining the IP of the other end, and this SRP protocol allows automatic discovery of devices and services on the Thread network.</p> <p></p> <ul> <li>Host: SRP Server domain.</li> <li>Lease: The lifetime of the DNS-SD PTR, SRV, A, AAAA and TXT records.</li> <li>Key Lease: The lifetime of the KEY records.</li> </ul> <p></p>"},{"location":"thread_board_router/gl-s200/thread_mesh/#backbone-routers","title":"Backbone Routers","text":"<p>The Backbone Router (BBR) function is primarily used to receive multicast inbound/outbound requests. Refer to Thread Border Router - Thread 1.2 Multicast for experimentation.</p> <p></p> <ul> <li>Backbone Interface: Select the interface that bbr use.</li> </ul> <p>Still have questions? Visit our Community Forum.</p>"}]}